{"file_contents":{"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/storage.ts":{"content":"import type {\n  User,\n  InsertUser,\n  Tenant,\n  InsertTenant,\n  Resource,\n  InsertResource,\n  Audience,\n  InsertAudience,\n  Campaign,\n  InsertCampaign,\n  Integration,\n  InsertIntegration,\n  Automation,\n  InsertAutomation,\n  AppSettings,\n  InsertAppSettings,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Tenant operations\n  getTenant(id: number): Promise<Tenant | undefined>;\n  createTenant(tenant: InsertTenant): Promise<Tenant>;\n\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUsersByTenant(tenantId: number): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Resource operations\n  getResource(id: number): Promise<Resource | undefined>;\n  getResourcesByTenant(tenantId: number): Promise<Resource[]>;\n  getResourcesByType(tenantId: number, type: string): Promise<Resource[]>;\n  createResource(resource: InsertResource): Promise<Resource>;\n  updateResource(id: number, resource: Partial<InsertResource>): Promise<Resource | undefined>;\n  deleteResource(id: number): Promise<boolean>;\n\n  // Audience operations\n  getAudience(id: number): Promise<Audience | undefined>;\n  getAudiencesByTenant(tenantId: number): Promise<Audience[]>;\n  createAudience(audience: InsertAudience): Promise<Audience>;\n  updateAudience(id: number, audience: Partial<InsertAudience>): Promise<Audience | undefined>;\n  deleteAudience(id: number): Promise<boolean>;\n\n  // Campaign operations\n  getCampaign(id: number): Promise<Campaign | undefined>;\n  getCampaignsByTenant(tenantId: number): Promise<Campaign[]>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  updateCampaign(id: number, campaign: Partial<InsertCampaign>): Promise<Campaign | undefined>;\n  deleteCampaign(id: number): Promise<boolean>;\n\n  // Integration operations\n  getIntegration(id: number): Promise<Integration | undefined>;\n  getIntegrationsByTenant(tenantId: number): Promise<Integration[]>;\n  getIntegrationByProvider(tenantId: number, provider: string): Promise<Integration | undefined>;\n  createIntegration(integration: InsertIntegration): Promise<Integration>;\n  updateIntegration(id: number, integration: Partial<InsertIntegration>): Promise<Integration | undefined>;\n  deleteIntegration(id: number): Promise<boolean>;\n\n  // Automation operations\n  getAutomation(id: number): Promise<Automation | undefined>;\n  getAutomationsByTenant(tenantId: number): Promise<Automation[]>;\n  getAutomationsByCampaign(campaignId: number): Promise<Automation[]>;\n  createAutomation(automation: InsertAutomation): Promise<Automation>;\n  updateAutomation(id: number, automation: Partial<InsertAutomation>): Promise<Automation | undefined>;\n\n  // App Settings operations (admin only)\n  getAppSettings(): Promise<AppSettings | undefined>;\n  createAppSettings(settings: InsertAppSettings): Promise<AppSettings>;\n  updateAppSettings(settings: Partial<InsertAppSettings>): Promise<AppSettings | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private tenants: Map<number, Tenant>;\n  private users: Map<number, User>;\n  private resources: Map<number, Resource>;\n  private audiences: Map<number, Audience>;\n  private campaigns: Map<number, Campaign>;\n  private integrations: Map<number, Integration>;\n  private automations: Map<number, Automation>;\n  private nextId: number;\n\n  constructor() {\n    this.tenants = new Map();\n    this.users = new Map();\n    this.resources = new Map();\n    this.audiences = new Map();\n    this.campaigns = new Map();\n    this.integrations = new Map();\n    this.automations = new Map();\n    this.nextId = 1;\n  }\n\n  // Tenant operations\n  async getTenant(id: number): Promise<Tenant | undefined> {\n    return this.tenants.get(id);\n  }\n\n  async createTenant(insertTenant: InsertTenant): Promise<Tenant> {\n    const id = this.nextId++;\n    const tenant: Tenant = {\n      ...insertTenant,\n      id,\n      createdAt: new Date(),\n    };\n    this.tenants.set(id, tenant);\n    return tenant;\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find((user) => user.email === email);\n  }\n\n  async getUsersByTenant(tenantId: number): Promise<User[]> {\n    return Array.from(this.users.values()).filter((user) => user.tenantId === tenantId);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.nextId++;\n    const user: User = {\n      ...insertUser,\n      id,\n      role: insertUser.role || \"user\",\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    const updated = { ...user, ...updates };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  // Resource operations\n  async getResource(id: number): Promise<Resource | undefined> {\n    return this.resources.get(id);\n  }\n\n  async getResourcesByTenant(tenantId: number): Promise<Resource[]> {\n    return Array.from(this.resources.values()).filter((r) => r.tenantId === tenantId);\n  }\n\n  async getResourcesByType(tenantId: number, type: string): Promise<Resource[]> {\n    return Array.from(this.resources.values()).filter(\n      (r) => r.tenantId === tenantId && r.type === type\n    );\n  }\n\n  async createResource(insertResource: InsertResource): Promise<Resource> {\n    const id = this.nextId++;\n    const resource: Resource = {\n      ...insertResource,\n      id,\n      createdAt: new Date(),\n    };\n    this.resources.set(id, resource);\n    return resource;\n  }\n\n  async updateResource(id: number, updates: Partial<InsertResource>): Promise<Resource | undefined> {\n    const resource = this.resources.get(id);\n    if (!resource) return undefined;\n    const updated = { ...resource, ...updates };\n    this.resources.set(id, updated);\n    return updated;\n  }\n\n  async deleteResource(id: number): Promise<boolean> {\n    return this.resources.delete(id);\n  }\n\n  // Audience operations\n  async getAudience(id: number): Promise<Audience | undefined> {\n    return this.audiences.get(id);\n  }\n\n  async getAudiencesByTenant(tenantId: number): Promise<Audience[]> {\n    return Array.from(this.audiences.values()).filter((a) => a.tenantId === tenantId);\n  }\n\n  async createAudience(insertAudience: InsertAudience): Promise<Audience> {\n    const id = this.nextId++;\n    const audience: Audience = {\n      ...insertAudience,\n      id,\n      ageMin: insertAudience.ageMin ?? null,\n      ageMax: insertAudience.ageMax ?? null,\n      interests: insertAudience.interests ?? null,\n      behaviors: insertAudience.behaviors ?? null,\n      customListFile: insertAudience.customListFile ?? null,\n      estimatedSize: insertAudience.estimatedSize ?? null,\n      createdAt: new Date(),\n    };\n    this.audiences.set(id, audience);\n    return audience;\n  }\n\n  async updateAudience(id: number, updates: Partial<InsertAudience>): Promise<Audience | undefined> {\n    const audience = this.audiences.get(id);\n    if (!audience) return undefined;\n    const updated = { ...audience, ...updates };\n    this.audiences.set(id, updated);\n    return updated;\n  }\n\n  async deleteAudience(id: number): Promise<boolean> {\n    return this.audiences.delete(id);\n  }\n\n  // Campaign operations\n  async getCampaign(id: number): Promise<Campaign | undefined> {\n    return this.campaigns.get(id);\n  }\n\n  async getCampaignsByTenant(tenantId: number): Promise<Campaign[]> {\n    return Array.from(this.campaigns.values()).filter((c) => c.tenantId === tenantId);\n  }\n\n  async createCampaign(insertCampaign: InsertCampaign): Promise<Campaign> {\n    const id = this.nextId++;\n    const campaign: Campaign = {\n      ...insertCampaign,\n      id,\n      status: insertCampaign.status || \"draft\",\n      accountId: insertCampaign.accountId ?? null,\n      pageId: insertCampaign.pageId ?? null,\n      instagramId: insertCampaign.instagramId ?? null,\n      whatsappId: insertCampaign.whatsappId ?? null,\n      leadformId: insertCampaign.leadformId ?? null,\n      websiteUrl: insertCampaign.websiteUrl ?? null,\n      title: insertCampaign.title ?? null,\n      message: insertCampaign.message ?? null,\n      driveFolderId: insertCampaign.driveFolderId ?? null,\n      startTime: insertCampaign.startTime ?? null,\n      endTime: insertCampaign.endTime ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.campaigns.set(id, campaign);\n    return campaign;\n  }\n\n  async updateCampaign(id: number, updates: Partial<InsertCampaign>): Promise<Campaign | undefined> {\n    const campaign = this.campaigns.get(id);\n    if (!campaign) return undefined;\n    const updated = { ...campaign, ...updates, updatedAt: new Date() };\n    this.campaigns.set(id, updated);\n    return updated;\n  }\n\n  async deleteCampaign(id: number): Promise<boolean> {\n    return this.campaigns.delete(id);\n  }\n\n  // Integration operations\n  async getIntegration(id: number): Promise<Integration | undefined> {\n    return this.integrations.get(id);\n  }\n\n  async getIntegrationsByTenant(tenantId: number): Promise<Integration[]> {\n    return Array.from(this.integrations.values()).filter((i) => i.tenantId === tenantId);\n  }\n\n  async getIntegrationByProvider(tenantId: number, provider: string): Promise<Integration | undefined> {\n    return Array.from(this.integrations.values()).find(\n      (i) => i.tenantId === tenantId && i.provider === provider\n    );\n  }\n\n  async createIntegration(insertIntegration: InsertIntegration): Promise<Integration> {\n    const id = this.nextId++;\n    const integration: Integration = {\n      ...insertIntegration,\n      id,\n      status: insertIntegration.status || \"pending\",\n      lastChecked: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.integrations.set(id, integration);\n    return integration;\n  }\n\n  async updateIntegration(\n    id: number,\n    updates: Partial<InsertIntegration>\n  ): Promise<Integration | undefined> {\n    const integration = this.integrations.get(id);\n    if (!integration) return undefined;\n    const updated = { ...integration, ...updates, updatedAt: new Date() };\n    this.integrations.set(id, updated);\n    return updated;\n  }\n\n  async deleteIntegration(id: number): Promise<boolean> {\n    return this.integrations.delete(id);\n  }\n\n  // Automation operations\n  async getAutomation(id: number): Promise<Automation | undefined> {\n    return this.automations.get(id);\n  }\n\n  async getAutomationsByTenant(tenantId: number): Promise<Automation[]> {\n    return Array.from(this.automations.values()).filter((a) => a.tenantId === tenantId);\n  }\n\n  async getAutomationsByCampaign(campaignId: number): Promise<Automation[]> {\n    return Array.from(this.automations.values()).filter((a) => a.campaignId === campaignId);\n  }\n\n  async createAutomation(insertAutomation: InsertAutomation): Promise<Automation> {\n    const id = this.nextId++;\n    const automation: Automation = {\n      ...insertAutomation,\n      id,\n      status: insertAutomation.status || \"pending\",\n      campaignId: insertAutomation.campaignId ?? null,\n      payload: insertAutomation.payload ?? null,\n      response: insertAutomation.response ?? null,\n      completedAt: null,\n      createdAt: new Date(),\n    };\n    this.automations.set(id, automation);\n    return automation;\n  }\n\n  async updateAutomation(\n    id: number,\n    updates: Partial<InsertAutomation>\n  ): Promise<Automation | undefined> {\n    const automation = this.automations.get(id);\n    if (!automation) return undefined;\n    const updated = { ...automation, ...updates };\n    this.automations.set(id, updated);\n    return updated;\n  }\n\n  // App Settings operations (admin only)\n  private appSettings: AppSettings | undefined;\n\n  async getAppSettings(): Promise<AppSettings | undefined> {\n    return this.appSettings;\n  }\n\n  async createAppSettings(insertSettings: InsertAppSettings): Promise<AppSettings> {\n    const settings: AppSettings = {\n      ...insertSettings,\n      id: 1,\n      metaAppId: insertSettings.metaAppId ?? null,\n      metaAppSecret: insertSettings.metaAppSecret ?? null,\n      googleClientId: insertSettings.googleClientId ?? null,\n      googleClientSecret: insertSettings.googleClientSecret ?? null,\n      n8nWebhookUrl: insertSettings.n8nWebhookUrl ?? null,\n      updatedAt: new Date(),\n    };\n    this.appSettings = settings;\n    return settings;\n  }\n\n  async updateAppSettings(updates: Partial<InsertAppSettings>): Promise<AppSettings | undefined> {\n    if (!this.appSettings) {\n      return this.createAppSettings(updates as InsertAppSettings);\n    }\n    const updated = { ...this.appSettings, ...updates, updatedAt: new Date() };\n    this.appSettings = updated;\n    return updated;\n  }\n}\n\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\n\nexport class DbStorage implements IStorage {\n  // Tenant operations\n  async getTenant(id: number): Promise<Tenant | undefined> {\n    const result = await db.query.tenants.findFirst({\n      where: eq(schema.tenants.id, id),\n    });\n    return result;\n  }\n\n  async createTenant(insertTenant: InsertTenant): Promise<Tenant> {\n    const [tenant] = await db.insert(schema.tenants).values(insertTenant).returning();\n    return tenant;\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: eq(schema.users.id, id),\n    });\n    return result;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: eq(schema.users.email, email),\n    });\n    return result;\n  }\n\n  async getUsersByTenant(tenantId: number): Promise<User[]> {\n    return db.query.users.findMany({\n      where: eq(schema.users.tenantId, tenantId),\n    });\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(schema.users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(schema.users)\n      .set(updates)\n      .where(eq(schema.users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Resource operations\n  async getResource(id: number): Promise<Resource | undefined> {\n    const result = await db.query.resources.findFirst({\n      where: eq(schema.resources.id, id),\n    });\n    return result;\n  }\n\n  async getResourcesByTenant(tenantId: number): Promise<Resource[]> {\n    return db.query.resources.findMany({\n      where: eq(schema.resources.tenantId, tenantId),\n    });\n  }\n\n  async getResourcesByType(tenantId: number, type: string): Promise<Resource[]> {\n    return db.query.resources.findMany({\n      where: and(eq(schema.resources.tenantId, tenantId), eq(schema.resources.type, type)),\n    });\n  }\n\n  async createResource(insertResource: InsertResource): Promise<Resource> {\n    const [resource] = await db.insert(schema.resources).values(insertResource).returning();\n    return resource;\n  }\n\n  async updateResource(\n    id: number,\n    updates: Partial<InsertResource>\n  ): Promise<Resource | undefined> {\n    const [resource] = await db\n      .update(schema.resources)\n      .set(updates)\n      .where(eq(schema.resources.id, id))\n      .returning();\n    return resource;\n  }\n\n  async deleteResource(id: number): Promise<boolean> {\n    const result = await db.delete(schema.resources).where(eq(schema.resources.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Audience operations\n  async getAudience(id: number): Promise<Audience | undefined> {\n    const result = await db.query.audiences.findFirst({\n      where: eq(schema.audiences.id, id),\n    });\n    return result;\n  }\n\n  async getAudiencesByTenant(tenantId: number): Promise<Audience[]> {\n    return db.query.audiences.findMany({\n      where: eq(schema.audiences.tenantId, tenantId),\n    });\n  }\n\n  async createAudience(insertAudience: InsertAudience): Promise<Audience> {\n    const [audience] = await db.insert(schema.audiences).values(insertAudience).returning();\n    return audience;\n  }\n\n  async updateAudience(\n    id: number,\n    updates: Partial<InsertAudience>\n  ): Promise<Audience | undefined> {\n    const [audience] = await db\n      .update(schema.audiences)\n      .set(updates)\n      .where(eq(schema.audiences.id, id))\n      .returning();\n    return audience;\n  }\n\n  async deleteAudience(id: number): Promise<boolean> {\n    const result = await db.delete(schema.audiences).where(eq(schema.audiences.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Campaign operations\n  async getCampaign(id: number): Promise<Campaign | undefined> {\n    const result = await db.query.campaigns.findFirst({\n      where: eq(schema.campaigns.id, id),\n    });\n    return result;\n  }\n\n  async getCampaignsByTenant(tenantId: number): Promise<Campaign[]> {\n    return db.query.campaigns.findMany({\n      where: eq(schema.campaigns.tenantId, tenantId),\n    });\n  }\n\n  async createCampaign(insertCampaign: InsertCampaign): Promise<Campaign> {\n    const [campaign] = await db.insert(schema.campaigns).values(insertCampaign).returning();\n    return campaign;\n  }\n\n  async updateCampaign(\n    id: number,\n    updates: Partial<InsertCampaign>\n  ): Promise<Campaign | undefined> {\n    const updateData = { ...updates, updatedAt: new Date() };\n    const [campaign] = await db\n      .update(schema.campaigns)\n      .set(updateData)\n      .where(eq(schema.campaigns.id, id))\n      .returning();\n    return campaign;\n  }\n\n  async deleteCampaign(id: number): Promise<boolean> {\n    const result = await db.delete(schema.campaigns).where(eq(schema.campaigns.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Integration operations\n  async getIntegration(id: number): Promise<Integration | undefined> {\n    const result = await db.query.integrations.findFirst({\n      where: eq(schema.integrations.id, id),\n    });\n    return result;\n  }\n\n  async getIntegrationsByTenant(tenantId: number): Promise<Integration[]> {\n    return db.query.integrations.findMany({\n      where: eq(schema.integrations.tenantId, tenantId),\n    });\n  }\n\n  async getIntegrationByProvider(\n    tenantId: number,\n    provider: string\n  ): Promise<Integration | undefined> {\n    const result = await db.query.integrations.findFirst({\n      where: and(\n        eq(schema.integrations.tenantId, tenantId),\n        eq(schema.integrations.provider, provider)\n      ),\n    });\n    return result;\n  }\n\n  async createIntegration(insertIntegration: InsertIntegration): Promise<Integration> {\n    const [integration] = await db\n      .insert(schema.integrations)\n      .values(insertIntegration)\n      .returning();\n    return integration;\n  }\n\n  async updateIntegration(\n    id: number,\n    updates: Partial<InsertIntegration>\n  ): Promise<Integration | undefined> {\n    const updateData = { ...updates, updatedAt: new Date() };\n    const [integration] = await db\n      .update(schema.integrations)\n      .set(updateData)\n      .where(eq(schema.integrations.id, id))\n      .returning();\n    return integration;\n  }\n\n  async deleteIntegration(id: number): Promise<boolean> {\n    const result = await db.delete(schema.integrations).where(eq(schema.integrations.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Automation operations\n  async getAutomation(id: number): Promise<Automation | undefined> {\n    const result = await db.query.automations.findFirst({\n      where: eq(schema.automations.id, id),\n    });\n    return result;\n  }\n\n  async getAutomationsByTenant(tenantId: number): Promise<Automation[]> {\n    return db.query.automations.findMany({\n      where: eq(schema.automations.tenantId, tenantId),\n    });\n  }\n\n  async getAutomationsByCampaign(campaignId: number): Promise<Automation[]> {\n    return db.query.automations.findMany({\n      where: eq(schema.automations.campaignId, campaignId),\n    });\n  }\n\n  async createAutomation(insertAutomation: InsertAutomation): Promise<Automation> {\n    const [automation] = await db\n      .insert(schema.automations)\n      .values(insertAutomation)\n      .returning();\n    return automation;\n  }\n\n  async updateAutomation(\n    id: number,\n    updates: Partial<InsertAutomation>\n  ): Promise<Automation | undefined> {\n    const [automation] = await db\n      .update(schema.automations)\n      .set(updates)\n      .where(eq(schema.automations.id, id))\n      .returning();\n    return automation;\n  }\n\n  // App Settings operations (admin only)\n  async getAppSettings(): Promise<AppSettings | undefined> {\n    const result = await db.query.appSettings.findFirst();\n    return result;\n  }\n\n  async createAppSettings(insertSettings: InsertAppSettings): Promise<AppSettings> {\n    const [settings] = await db\n      .insert(schema.appSettings)\n      .values(insertSettings)\n      .returning();\n    return settings;\n  }\n\n  async updateAppSettings(updates: Partial<InsertAppSettings>): Promise<AppSettings | undefined> {\n    const existing = await this.getAppSettings();\n    if (!existing) {\n      return this.createAppSettings(updates as InsertAppSettings);\n    }\n    \n    const updateData = { ...updates, updatedAt: new Date() };\n    const [settings] = await db\n      .update(schema.appSettings)\n      .set(updateData)\n      .where(eq(schema.appSettings.id, existing.id))\n      .returning();\n    return settings;\n  }\n}\n\n// Use DbStorage for production, MemStorage for testing\nexport const storage = process.env.NODE_ENV === \"test\" ? new MemStorage() : new DbStorage();\n","size_bytes":21781},"client/src/pages/Dashboard.tsx":{"content":"import { DollarSign, Users, MousePointerClick, TrendingUp } from \"lucide-react\";\nimport KPICard from \"@/components/KPICard\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Dashboard() {\n  const campaigns = [\n    { id: 1, name: \"Summer Sale 2025\", objective: \"CONVERSIONS\", status: \"active\", spend: \"R$ 4.250\", leads: 142, cpl: \"R$ 29,93\" },\n    { id: 2, name: \"Brand Awareness Q1\", objective: \"REACH\", status: \"active\", spend: \"R$ 3.100\", leads: 89, cpl: \"R$ 34,83\" },\n    { id: 3, name: \"Lead Generation\", objective: \"LEAD\", status: \"paused\", spend: \"R$ 2.890\", leads: 76, cpl: \"R$ 38,03\" },\n  ];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-semibold\">Dashboard</h1>\n        <p className=\"text-muted-foreground\">Visão geral das suas campanhas Meta Ads</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <KPICard\n          title=\"Total Gasto\"\n          value=\"R$ 12.450\"\n          icon={DollarSign}\n          trend={{ value: \"12.5%\", positive: true }}\n        />\n        <KPICard\n          title=\"Total Leads\"\n          value=\"307\"\n          icon={Users}\n          trend={{ value: \"8.2%\", positive: true }}\n        />\n        <KPICard\n          title=\"CPL Médio\"\n          value=\"R$ 40,55\"\n          icon={TrendingUp}\n          trend={{ value: \"3.1%\", positive: false }}\n        />\n        <KPICard\n          title=\"CTR Médio\"\n          value=\"2.4%\"\n          icon={MousePointerClick}\n          trend={{ value: \"0.4%\", positive: true }}\n        />\n      </div>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <CardTitle className=\"text-xl\">Campanhas Ativas</CardTitle>\n          <Button data-testid=\"button-new-campaign\">Nova Campanha</Button>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Nome</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Objetivo</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Status</th>\n                  <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">Gasto</th>\n                  <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">Leads</th>\n                  <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">CPL</th>\n                </tr>\n              </thead>\n              <tbody>\n                {campaigns.map((campaign) => (\n                  <tr key={campaign.id} className=\"border-b hover-elevate\" data-testid={`row-campaign-${campaign.id}`}>\n                    <td className=\"py-4 px-4 font-medium\">{campaign.name}</td>\n                    <td className=\"py-4 px-4\">\n                      <Badge variant=\"outline\">{campaign.objective}</Badge>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <Badge variant={campaign.status === \"active\" ? \"default\" : \"secondary\"}>\n                        {campaign.status === \"active\" ? \"Ativa\" : \"Pausada\"}\n                      </Badge>\n                    </td>\n                    <td className=\"py-4 px-4 text-right font-mono\">{campaign.spend}</td>\n                    <td className=\"py-4 px-4 text-right\">{campaign.leads}</td>\n                    <td className=\"py-4 px-4 text-right font-mono\">{campaign.cpl}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3963},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from \"../AppSidebar\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  return (\n    <SidebarProvider>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex-1 p-6\">\n          <p className=\"text-muted-foreground\">Main content area</p>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":415},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/Onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { CheckCircle2, Circle, Loader2 } from \"lucide-react\";\nimport StatusBadge from \"@/components/StatusBadge\";\n\nexport default function Onboarding() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [metaStatus, setMetaStatus] = useState<\"pending\" | \"connected\" | \"error\">(\"pending\");\n  const [driveStatus, setDriveStatus] = useState<\"pending\" | \"connected\" | \"error\">(\"pending\");\n  const [isTesting, setIsTesting] = useState(false);\n\n  const handleTestMeta = () => {\n    setIsTesting(true);\n    setTimeout(() => {\n      setMetaStatus(\"connected\");\n      setIsTesting(false);\n    }, 2000);\n  };\n\n  const handleTestDrive = () => {\n    setIsTesting(true);\n    setTimeout(() => {\n      setDriveStatus(\"connected\");\n      setIsTesting(false);\n    }, 2000);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <div className=\"w-full max-w-3xl\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-semibold mb-2\">Configuração Inicial</h1>\n          <p className=\"text-muted-foreground\">Configure suas integrações para começar</p>\n        </div>\n\n        <div className=\"flex items-center justify-center mb-8\">\n          <div className=\"flex items-center\">\n            <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${currentStep >= 1 ? \"border-primary bg-primary text-primary-foreground\" : \"border-muted\"}`}>\n              {currentStep > 1 ? <CheckCircle2 className=\"w-5 h-5\" /> : <span>1</span>}\n            </div>\n            <div className={`w-24 h-0.5 ${currentStep >= 2 ? \"bg-primary\" : \"bg-muted\"}`} />\n            <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${currentStep >= 2 ? \"border-primary bg-primary text-primary-foreground\" : \"border-muted\"}`}>\n              {currentStep > 2 ? <CheckCircle2 className=\"w-5 h-5\" /> : <span>2</span>}\n            </div>\n          </div>\n        </div>\n\n        {currentStep === 1 && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Meta Ads</CardTitle>\n                  <CardDescription>Conecte sua conta Meta Ads</CardDescription>\n                </div>\n                <StatusBadge status={metaStatus} />\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"meta-token\">Access Token *</Label>\n                <Input id=\"meta-token\" type=\"password\" placeholder=\"EAAx...\" data-testid=\"input-meta-token\" />\n              </div>\n\n              <div className=\"flex gap-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={handleTestMeta}\n                  disabled={isTesting}\n                  data-testid=\"button-test-meta\"\n                >\n                  {isTesting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Testar Conexão\n                </Button>\n                <Button\n                  onClick={() => setCurrentStep(2)}\n                  disabled={metaStatus !== \"connected\"}\n                  data-testid=\"button-next\"\n                >\n                  Continuar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {currentStep === 2 && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Google Drive</CardTitle>\n                  <CardDescription>Conecte sua conta Google Drive</CardDescription>\n                </div>\n                <StatusBadge status={driveStatus} />\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"drive-folder\">Pasta Padrão (ID) *</Label>\n                <Input id=\"drive-folder\" placeholder=\"1aBcDeFg...\" data-testid=\"input-drive-folder\" />\n              </div>\n\n              <div className=\"flex gap-4\">\n                <Button variant=\"outline\" onClick={() => setCurrentStep(1)} data-testid=\"button-back\">\n                  Voltar\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleTestDrive}\n                  disabled={isTesting}\n                  data-testid=\"button-test-drive\"\n                >\n                  {isTesting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Testar Conexão\n                </Button>\n                <Button\n                  disabled={driveStatus !== \"connected\"}\n                  data-testid=\"button-finish\"\n                  onClick={() => console.log(\"Onboarding complete\")}\n                >\n                  Concluir\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5301},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/examples/Resources.tsx":{"content":"import Resources from \"../../pages/Resources\";\n\nexport default function ResourcesExample() {\n  return <Resources />;\n}\n","size_bytes":119},"client/src/components/examples/Campaigns.tsx":{"content":"import Campaigns from \"../../pages/Campaigns\";\n\nexport default function CampaignsExample() {\n  return <Campaigns />;\n}\n","size_bytes":119},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/pages/Resources.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Link as LinkIcon } from \"lucide-react\";\nimport ResourceCard from \"@/components/ResourceCard\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ntype ResourceType = \"account\" | \"page\" | \"instagram\" | \"whatsapp\" | \"leadform\" | \"website\";\n\ninterface Resource {\n  id: number;\n  tenantId: number;\n  type: ResourceType;\n  name: string;\n  value: string;\n}\n\nconst resourceTypeLabels: Record<ResourceType, { title: string; placeholder: string }> = {\n  account: { title: \"Conta de Anúncios\", placeholder: \"act_123456789\" },\n  page: { title: \"Página do Facebook\", placeholder: \"pg_987654321\" },\n  instagram: { title: \"Instagram Business\", placeholder: \"ig_456789123\" },\n  whatsapp: { title: \"WhatsApp Business\", placeholder: \"wa_789123456\" },\n  leadform: { title: \"Formulário de Leads\", placeholder: \"lf_321654987\" },\n  website: { title: \"Website\", placeholder: \"https://exemplo.com\" },\n};\n\nexport default function Resources() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [currentTab, setCurrentTab] = useState<ResourceType>(\"account\");\n  const [newResource, setNewResource] = useState({\n    type: \"account\" as ResourceType,\n    name: \"\",\n    value: \"\",\n  });\n  const { toast } = useToast();\n\n  const { data: resources = [], isLoading } = useQuery<Resource[]>({\n    queryKey: [\"/api/resources\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: { type: ResourceType; name: string; value: string }) =>\n      apiRequest(\"POST\", \"/api/resources\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/resources\"] });\n      setIsDialogOpen(false);\n      setNewResource({ type: \"account\", name: \"\", value: \"\" });\n      toast({\n        title: \"Recurso criado com sucesso\",\n        description: \"O recurso foi adicionado à sua lista\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao criar recurso\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) =>\n      apiRequest(\"DELETE\", `/api/resources/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/resources\"] });\n      toast({\n        title: \"Recurso excluído\",\n        description: \"O recurso foi removido com sucesso\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao excluir recurso\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createMutation.mutate(newResource);\n  };\n\n  const handleMetaOAuth = () => {\n    window.location.href = \"/auth/meta\";\n  };\n\n  // Check for OAuth success\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    if (params.get('oauth') === 'success') {\n      toast({\n        title: \"Conectado com sucesso!\",\n        description: \"Seus recursos Meta foram importados automaticamente.\",\n      });\n      // Clean URL\n      window.history.replaceState({}, '', '/resources');\n      // Refresh resources\n      queryClient.invalidateQueries({ queryKey: [\"/api/resources\"] });\n    }\n  }, [toast]);\n\n  const groupedResources = resources.reduce((acc, resource) => {\n    if (!acc[resource.type]) {\n      acc[resource.type] = [];\n    }\n    acc[resource.type].push(resource);\n    return acc;\n  }, {} as Record<ResourceType, Resource[]>);\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Recursos</h1>\n          <p className=\"text-muted-foreground\">Gerencie seus recursos Meta Ads</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={handleMetaOAuth} \n            data-testid=\"button-connect-meta\"\n          >\n            <LinkIcon className=\"h-4 w-4 mr-2\" />\n            Conectar com Meta\n          </Button>\n          <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-resource\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Adicionar Recurso\n          </Button>\n        </div>\n      </div>\n\n      <Tabs value={currentTab} onValueChange={(v) => setCurrentTab(v as ResourceType)}>\n        <TabsList>\n          <TabsTrigger value=\"account\" data-testid=\"tab-accounts\">Contas</TabsTrigger>\n          <TabsTrigger value=\"page\" data-testid=\"tab-pages\">Páginas</TabsTrigger>\n          <TabsTrigger value=\"instagram\" data-testid=\"tab-instagram\">Instagram</TabsTrigger>\n          <TabsTrigger value=\"whatsapp\" data-testid=\"tab-whatsapp\">WhatsApp</TabsTrigger>\n          <TabsTrigger value=\"leadform\" data-testid=\"tab-leadforms\">Formulários</TabsTrigger>\n          <TabsTrigger value=\"website\" data-testid=\"tab-websites\">Websites</TabsTrigger>\n        </TabsList>\n\n        {isLoading ? (\n          <div className=\"mt-6 text-center py-12\">\n            <p className=\"text-muted-foreground\">Carregando recursos...</p>\n          </div>\n        ) : (\n          (Object.keys(resourceTypeLabels) as ResourceType[]).map((type) => (\n            <TabsContent key={type} value={type} className=\"mt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {groupedResources[type]?.length > 0 ? (\n                  groupedResources[type].map((resource) => (\n                    <ResourceCard\n                      key={resource.id}\n                      title={resource.name}\n                      label={resourceTypeLabels[type].title}\n                      value={resource.value}\n                      onEdit={() => {\n                        toast({\n                          title: \"Em desenvolvimento\",\n                          description: \"Funcionalidade de edição em breve\",\n                        });\n                      }}\n                      onDelete={() => deleteMutation.mutate(resource.id)}\n                    />\n                  ))\n                ) : (\n                  <div className=\"col-span-full text-center py-12\">\n                    <p className=\"text-muted-foreground\">\n                      Nenhum recurso cadastrado nesta categoria\n                    </p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          ))\n        )}\n      </Tabs>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Adicionar Recurso</DialogTitle>\n            <DialogDescription>Preencha os dados do novo recurso</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit}>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\">Tipo de Recurso</Label>\n                <Select\n                  value={newResource.type}\n                  onValueChange={(value) =>\n                    setNewResource({ ...newResource, type: value as ResourceType })\n                  }\n                >\n                  <SelectTrigger data-testid=\"select-resource-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"account\">Conta de Anúncios</SelectItem>\n                    <SelectItem value=\"page\">Página do Facebook</SelectItem>\n                    <SelectItem value=\"instagram\">Instagram Business</SelectItem>\n                    <SelectItem value=\"whatsapp\">WhatsApp Business</SelectItem>\n                    <SelectItem value=\"leadform\">Formulário de Leads</SelectItem>\n                    <SelectItem value=\"website\">Website</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Nome Descritivo</Label>\n                <Input\n                  id=\"name\"\n                  placeholder=\"Nome para identificar este recurso\"\n                  value={newResource.name}\n                  onChange={(e) => setNewResource({ ...newResource, name: e.target.value })}\n                  data-testid=\"input-resource-name\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"value\">ID ou URL</Label>\n                <Input\n                  id=\"value\"\n                  placeholder={resourceTypeLabels[newResource.type].placeholder}\n                  value={newResource.value}\n                  onChange={(e) => setNewResource({ ...newResource, value: e.target.value })}\n                  data-testid=\"input-resource-value\"\n                  required\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsDialogOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                data-testid=\"button-save\"\n                disabled={createMutation.isPending}\n              >\n                {createMutation.isPending ? \"Salvando...\" : \"Salvar\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":10101},"client/src/components/KPICard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface KPICardProps {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  trend?: {\n    value: string;\n    positive: boolean;\n  };\n}\n\nexport default function KPICard({ title, value, icon: Icon, trend }: KPICardProps) {\n  return (\n    <Card data-testid={`card-kpi-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-3xl font-bold\">{value}</div>\n        {trend && (\n          <p className={`text-xs ${trend.positive ? \"text-green-600 dark:text-green-400\" : \"text-red-600 dark:text-red-400\"}`}>\n            {trend.positive ? \"+\" : \"\"}{trend.value}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1048},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const res = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!res.ok) {\n        const data = await res.json();\n        throw new Error(data.message || \"Falha no login\");\n      }\n\n      const data = await res.json();\n      login(data.user);\n      toast({\n        title: \"Login realizado com sucesso!\",\n        description: `Bem-vindo, ${data.user.email}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro no login\",\n        description: error instanceof Error ? error.message : \"Credenciais inválidas\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Meta Ads Campaign Manager</CardTitle>\n          <CardDescription>Entre com suas credenciais para acessar a plataforma</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"seu@email.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                data-testid=\"input-email\"\n                required\n                disabled={isLoading}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                data-testid=\"input-password\"\n                required\n                disabled={isLoading}\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" data-testid=\"button-login\" disabled={isLoading}>\n              {isLoading ? \"Entrando...\" : \"Entrar\"}\n            </Button>\n            <div className=\"text-center text-sm\">\n              <span className=\"text-muted-foreground\">Não tem uma conta? </span>\n              <a href=\"/register\" className=\"text-primary hover:underline\" data-testid=\"link-register\">\n                Cadastre-se\n              </a>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3427},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/ExistingCampaignForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Loader2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface Resource {\n  id: number;\n  type: string;\n  name: string;\n  value: string;\n}\n\nexport default function ExistingCampaignForm() {\n  const [selectedObjectives, setSelectedObjectives] = useState<string[]>([]);\n  const [pageId, setPageId] = useState<string>(\"\");\n  const [instagramId, setInstagramId] = useState<string>(\"\");\n  const [whatsappId, setWhatsappId] = useState<string>(\"\");\n  const [leadFormId, setLeadFormId] = useState<string>(\"\");\n  const [websiteUrl, setWebsiteUrl] = useState<string>(\"\");\n  const [driveFolderId, setDriveFolderId] = useState<string>(\"\");\n  const [title, setTitle] = useState<string>(\"\");\n  const [message, setMessage] = useState<string>(\"\");\n  \n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const { data: resources = [], isLoading: loadingResources } = useQuery<Resource[]>({\n    queryKey: [\"/api/resources\"],\n  });\n\n  const objectives = [\n    { value: \"LEAD\", label: \"Geração de Leads\", requiresLeadForm: true },\n    { value: \"TRAFFIC\", label: \"Tráfego\", requiresWebsite: true },\n    { value: \"WHATSAPP\", label: \"WhatsApp\", requiresWhatsApp: true },\n    { value: \"CONVERSIONS\", label: \"Conversões\" },\n    { value: \"REACH\", label: \"Alcance\" },\n  ];\n\n  const toggleObjective = (value: string) => {\n    setSelectedObjectives((prev) =>\n      prev.includes(value) ? prev.filter((o) => o !== value) : [...prev, value]\n    );\n  };\n\n  const needsLeadForm = selectedObjectives.includes(\"LEAD\");\n  const needsWebsite = selectedObjectives.includes(\"TRAFFIC\");\n  const needsWhatsApp = selectedObjectives.includes(\"WHATSAPP\");\n\n  const pages = resources.filter((r) => r.type === \"page\");\n  const instagramAccounts = resources.filter((r) => r.type === \"instagram\");\n  const whatsappNumbers = resources.filter((r) => r.type === \"whatsapp\");\n  const leadForms = resources.filter((r) => r.type === \"leadform\");\n  const driveFolders = resources.filter((r) => r.type === \"drive_folder\");\n\n  const sendWebhookMutation = useMutation({\n    mutationFn: async (payload: any) => {\n      return await apiRequest(\"POST\", \"/api/webhooks/n8n\", payload);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Enviado com sucesso!\",\n        description: \"Os dados foram enviados para o n8n\",\n      });\n      setLocation(\"/campaigns\");\n    },\n    onError: (error: any) => {\n      // Extract message from error\n      let errorMessage = \"Não foi possível enviar os dados\";\n      \n      if (error.message) {\n        // Error format: \"500: {\\\"message\\\":\\\"...\\\"}\"\n        try {\n          const match = error.message.match(/\\d+:\\s*(.+)/);\n          if (match && match[1]) {\n            const jsonPart = match[1];\n            const parsed = JSON.parse(jsonPart);\n            errorMessage = parsed.message || errorMessage;\n          }\n        } catch (e) {\n          // If parsing fails, use the original error message\n          errorMessage = error.message;\n        }\n      }\n      \n      toast({\n        title: \"Erro ao enviar\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!pageId || !instagramId || !driveFolderId || !title || !message) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, preencha todos os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (selectedObjectives.length === 0) {\n      toast({\n        title: \"Selecione pelo menos um objetivo\",\n        description: \"É necessário selecionar ao menos um objetivo para a campanha\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (needsWhatsApp && !whatsappId) {\n      toast({\n        title: \"WhatsApp obrigatório\",\n        description: \"Objetivo WhatsApp requer um número WhatsApp\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (needsLeadForm && !leadFormId) {\n      toast({\n        title: \"Formulário obrigatório\",\n        description: \"Objetivo de Leads requer um formulário de leads\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (needsWebsite && !websiteUrl) {\n      toast({\n        title: \"Website obrigatório\",\n        description: \"Objetivo de Tráfego requer uma URL de website\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const selectedPage = pages.find((p) => p.value === pageId);\n    const selectedInstagram = instagramAccounts.find((i) => i.value === instagramId);\n    const selectedWhatsApp = whatsappNumbers.find((w) => w.value === whatsappId);\n    const selectedLeadForm = leadForms.find((lf) => lf.value === leadFormId);\n    const selectedDriveFolder = driveFolders.find((df) => df.value === driveFolderId);\n\n    const payload = {\n      objectives: selectedObjectives,\n      page_id: selectedPage?.value || pageId,\n      page_name: selectedPage?.name || \"\",\n      instagram_user_id: selectedInstagram?.value || instagramId,\n      instagram_name: selectedInstagram?.name || \"\",\n      whatsapp_number_id: selectedWhatsApp?.value || whatsappId,\n      whatsapp_name: selectedWhatsApp?.name || \"\",\n      leadgen_form_id: selectedLeadForm?.value || leadFormId,\n      leadgen_form_name: selectedLeadForm?.name || \"\",\n      website_url: websiteUrl,\n      drive_folder_id: selectedDriveFolder?.value || driveFolderId,\n      drive_folder_name: selectedDriveFolder?.name || \"\",\n      title,\n      message,\n      metadata: {\n        form_type: \"existing_campaign\",\n        timestamp: new Date().toISOString(),\n      },\n    };\n\n    sendWebhookMutation.mutate(payload);\n  };\n\n  if (loadingResources) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-semibold\">Adicionar a Campanha Existente</h1>\n        <p className=\"text-muted-foreground\">\n          Adicione novos anúncios a campanhas já criadas no Meta Ads\n        </p>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Objetivos</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Selecione um ou mais objetivos para esta campanha\n            </p>\n            {objectives.map((objective) => (\n              <div key={objective.value} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={objective.value}\n                  checked={selectedObjectives.includes(objective.value)}\n                  onCheckedChange={() => toggleObjective(objective.value)}\n                  data-testid={`checkbox-objective-${objective.value.toLowerCase()}`}\n                />\n                <Label htmlFor={objective.value} className=\"cursor-pointer\">\n                  {objective.label}\n                </Label>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recursos</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"page\">Página Facebook *</Label>\n                <Select value={pageId} onValueChange={setPageId}>\n                  <SelectTrigger id=\"page\" data-testid=\"select-page\">\n                    <SelectValue placeholder=\"Selecione\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {pages.length === 0 ? (\n                      <SelectItem value=\"none\" disabled>\n                        Nenhuma página disponível\n                      </SelectItem>\n                    ) : (\n                      pages.map((page) => (\n                        <SelectItem key={page.id} value={page.value}>\n                          {page.name}\n                        </SelectItem>\n                      ))\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"instagram\">Instagram User ID *</Label>\n                <Select value={instagramId} onValueChange={setInstagramId}>\n                  <SelectTrigger id=\"instagram\" data-testid=\"select-instagram\">\n                    <SelectValue placeholder=\"Selecione\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {instagramAccounts.length === 0 ? (\n                      <SelectItem value=\"none\" disabled>\n                        Nenhuma conta Instagram disponível\n                      </SelectItem>\n                    ) : (\n                      instagramAccounts.map((instagram) => (\n                        <SelectItem key={instagram.id} value={instagram.value}>\n                          {instagram.name}\n                        </SelectItem>\n                      ))\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {needsWhatsApp && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"whatsapp\">WhatsApp Number ID *</Label>\n                <Select value={whatsappId} onValueChange={setWhatsappId}>\n                  <SelectTrigger id=\"whatsapp\" data-testid=\"select-whatsapp\">\n                    <SelectValue placeholder=\"Selecione\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {whatsappNumbers.length === 0 ? (\n                      <SelectItem value=\"none\" disabled>\n                        Nenhum número WhatsApp disponível\n                      </SelectItem>\n                    ) : (\n                      whatsappNumbers.map((whatsapp) => (\n                        <SelectItem key={whatsapp.id} value={whatsapp.value}>\n                          {whatsapp.name}\n                        </SelectItem>\n                      ))\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {needsLeadForm && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"leadform\">Formulário de Leads *</Label>\n                <Select value={leadFormId} onValueChange={setLeadFormId}>\n                  <SelectTrigger id=\"leadform\" data-testid=\"select-leadform\">\n                    <SelectValue placeholder=\"Selecione\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {leadForms.length === 0 ? (\n                      <SelectItem value=\"none\" disabled>\n                        Nenhum formulário disponível\n                      </SelectItem>\n                    ) : (\n                      leadForms.map((form) => (\n                        <SelectItem key={form.id} value={form.value}>\n                          {form.name}\n                        </SelectItem>\n                      ))\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {needsWebsite && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"website\">Website URL *</Label>\n                <Input\n                  id=\"website\"\n                  type=\"url\"\n                  placeholder=\"https://exemplo.com\"\n                  value={websiteUrl}\n                  onChange={(e) => setWebsiteUrl(e.target.value)}\n                  data-testid=\"input-website\"\n                />\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Criativos</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Título *</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Título do anúncio\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                data-testid=\"input-title\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"message\">Texto Principal *</Label>\n              <Textarea\n                id=\"message\"\n                placeholder=\"Mensagem do anúncio\"\n                rows={4}\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                data-testid=\"input-message\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"drive-folder\">Pasta Google Drive *</Label>\n              <Select value={driveFolderId} onValueChange={setDriveFolderId}>\n                <SelectTrigger id=\"drive-folder\" data-testid=\"select-drive-folder\">\n                  <SelectValue placeholder=\"Selecione a pasta com criativos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {driveFolders.length === 0 ? (\n                    <SelectItem value=\"none\" disabled>\n                      Nenhuma pasta disponível\n                    </SelectItem>\n                  ) : (\n                    driveFolders.map((folder) => (\n                      <SelectItem key={folder.id} value={folder.value}>\n                        {folder.name}\n                      </SelectItem>\n                    ))\n                  )}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"flex justify-end gap-4\">\n          <Button\n            variant=\"outline\"\n            type=\"button\"\n            onClick={() => setLocation(\"/campaigns\")}\n            data-testid=\"button-cancel\"\n          >\n            Cancelar\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={sendWebhookMutation.isPending}\n            data-testid=\"button-submit\"\n          >\n            {sendWebhookMutation.isPending ? (\n              <>\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                Enviando...\n              </>\n            ) : (\n              \"Enviar para n8n\"\n            )}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","size_bytes":15105},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport memorystore from \"memorystore\";\nimport { z } from \"zod\";\nimport type { User } from \"@shared/schema\";\nimport { insertUserSchema, insertResourceSchema, insertAudienceSchema, insertCampaignSchema, insertIntegrationSchema } from \"@shared/schema\";\nimport crypto from \"crypto\";\n\n// Extend session data to include OAuth state\ndeclare module \"express-session\" {\n  interface SessionData {\n    oauthUserId?: number;\n    oauthTenantId?: number;\n  }\n}\n\nconst MemoryStore = memorystore(session);\n\n// Password hashing utilities\nimport bcrypt from \"bcryptjs\";\n\nasync function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, 10);\n}\n\nasync function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\n// Configure passport\npassport.use(\n  new LocalStrategy(\n    { usernameField: \"email\", passwordField: \"password\" },\n    async (email, password, done) => {\n      try {\n        const user = await storage.getUserByEmail(email);\n        if (!user) {\n          return done(null, false, { message: \"Incorrect email or password\" });\n        }\n\n        const isValid = await verifyPassword(password, user.password);\n        if (!isValid) {\n          return done(null, false, { message: \"Incorrect email or password\" });\n        }\n\n        return done(null, user);\n      } catch (err) {\n        return done(err);\n      }\n    }\n  )\n);\n\npassport.serializeUser((user: Express.User, done) => {\n  done(null, (user as User).id);\n});\n\npassport.deserializeUser(async (id: number, done) => {\n  try {\n    const user = await storage.getUser(id);\n    done(null, user);\n  } catch (err) {\n    done(err);\n  }\n});\n\n// Middleware to check authentication\nfunction isAuthenticated(req: Express.Request, res: Express.Response, next: Express.NextFunction) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n}\n\n// Middleware to check if user is admin\nfunction isAdmin(req: Express.Request, res: Express.Response, next: Express.NextFunction) {\n  if (req.isAuthenticated()) {\n    const user = req.user as User;\n    if (user.role === \"admin\") {\n      return next();\n    }\n  }\n  res.status(403).json({ message: \"Forbidden - Admin access required\" });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure session\n  app.use(\n    session({\n      secret: process.env.SESSION_SECRET || \"meta-ads-campaign-manager-secret\",\n      resave: false,\n      saveUninitialized: false,\n      store: new MemoryStore({ checkPeriod: 86400000 }),\n      cookie: { secure: false, maxAge: 7 * 24 * 60 * 60 * 1000 }, // 7 days\n    })\n  );\n\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // ===== Authentication Routes =====\n\n  // Register\n  app.post(\"/api/auth/register\", async (req, res, next) => {\n    try {\n      const registerSchema = z.object({\n        email: z.string().email(),\n        password: z.string().min(6),\n        tenantName: z.string().min(1),\n      });\n\n      const data = registerSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(data.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Create tenant\n      const tenant = await storage.createTenant({ name: data.tenantName });\n\n      // Hash password and create user\n      const hashedPassword = await hashPassword(data.password);\n      const user = await storage.createUser({\n        email: data.email,\n        password: hashedPassword,\n        tenantId: tenant.id,\n        role: \"admin\", // First user is admin\n      });\n\n      // Login user automatically\n      req.login(user, (err) => {\n        if (err) return next(err);\n        const { password: _, ...userWithoutPassword } = user;\n        res.json({ user: userWithoutPassword });\n      });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Login\n  app.post(\"/api/auth/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: Express.User, info: any) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Authentication failed\" });\n      }\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        const { password: _, ...userWithoutPassword } = user as User;\n        res.json({ user: userWithoutPassword });\n      });\n    })(req, res, next);\n  });\n\n  // Logout\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout(() => {\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user\n  app.get(\"/api/auth/me\", isAuthenticated, (req, res) => {\n    const { password: _, ...userWithoutPassword } = req.user as User;\n    res.json({ user: userWithoutPassword });\n  });\n\n  // ===== Resource Routes =====\n\n  // Get all resources for tenant\n  app.get(\"/api/resources\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const resources = await storage.getResourcesByTenant(user.tenantId);\n      res.json(resources);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Get resources by type\n  app.get(\"/api/resources/:type\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const resources = await storage.getResourcesByType(user.tenantId, req.params.type);\n      res.json(resources);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Create resource\n  app.post(\"/api/resources\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const data = insertResourceSchema.parse(req.body);\n      \n      const resource = await storage.createResource({\n        ...data,\n        tenantId: user.tenantId,\n      });\n\n      res.status(201).json(resource);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Update resource\n  app.patch(\"/api/resources/:id\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const id = parseInt(req.params.id);\n      \n      // Verify resource belongs to user's tenant\n      const existing = await storage.getResource(id);\n      if (!existing || existing.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Resource not found\" });\n      }\n\n      // Prevent tenantId override\n      const { tenantId, ...data } = insertResourceSchema.partial().parse(req.body);\n      \n      const resource = await storage.updateResource(id, data);\n      res.json(resource);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Delete resource\n  app.delete(\"/api/resources/:id\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const id = parseInt(req.params.id);\n      \n      // Verify resource belongs to user's tenant\n      const existing = await storage.getResource(id);\n      if (!existing || existing.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Resource not found\" });\n      }\n\n      await storage.deleteResource(id);\n      res.json({ message: \"Resource deleted successfully\" });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // ===== Audience Routes =====\n\n  // Get all audiences for tenant\n  app.get(\"/api/audiences\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const audiences = await storage.getAudiencesByTenant(user.tenantId);\n      res.json(audiences);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Get single audience\n  app.get(\"/api/audiences/:id\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const id = parseInt(req.params.id);\n      const audience = await storage.getAudience(id);\n      \n      if (!audience || audience.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Audience not found\" });\n      }\n\n      res.json(audience);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Create audience\n  app.post(\"/api/audiences\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const data = insertAudienceSchema.parse(req.body);\n      \n      const audience = await storage.createAudience({\n        ...data,\n        tenantId: user.tenantId,\n      });\n\n      res.status(201).json(audience);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Update audience\n  app.patch(\"/api/audiences/:id\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const id = parseInt(req.params.id);\n      \n      // Verify audience belongs to user's tenant\n      const existing = await storage.getAudience(id);\n      if (!existing || existing.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Audience not found\" });\n      }\n\n      // Prevent tenantId override\n      const { tenantId, ...data } = insertAudienceSchema.partial().parse(req.body);\n      \n      const audience = await storage.updateAudience(id, data);\n      res.json(audience);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Delete audience\n  app.delete(\"/api/audiences/:id\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const id = parseInt(req.params.id);\n      \n      // Verify audience belongs to user's tenant\n      const existing = await storage.getAudience(id);\n      if (!existing || existing.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Audience not found\" });\n      }\n\n      await storage.deleteAudience(id);\n      res.json({ message: \"Audience deleted successfully\" });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // ===== Campaign Routes =====\n\n  // Get all campaigns for tenant\n  app.get(\"/api/campaigns\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const campaigns = await storage.getCampaignsByTenant(user.tenantId);\n      res.json(campaigns);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Get single campaign\n  app.get(\"/api/campaigns/:id\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const id = parseInt(req.params.id);\n      const campaign = await storage.getCampaign(id);\n      \n      if (!campaign || campaign.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n\n      res.json(campaign);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Create campaign\n  app.post(\"/api/campaigns\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const data = insertCampaignSchema.parse(req.body);\n      \n      const campaign = await storage.createCampaign({\n        ...data,\n        tenantId: user.tenantId,\n      });\n\n      // Send webhook to n8n if configured\n      try {\n        const settings = await storage.getAppSettings();\n        if (settings?.n8nWebhookUrl) {\n          // Fetch resource details\n          const accountResource = campaign.accountId ? await storage.getResource(campaign.accountId) : null;\n          const pageResource = campaign.pageId ? await storage.getResource(campaign.pageId) : null;\n          const instagramResource = campaign.instagramId ? await storage.getResource(campaign.instagramId) : null;\n          const whatsappResource = campaign.whatsappId ? await storage.getResource(campaign.whatsappId) : null;\n          const leadformResource = campaign.leadformId ? await storage.getResource(campaign.leadformId) : null;\n\n          // Prepare webhook payload matching the provided example\n          const webhookPayload = [{\n            headers: {\n              \"content-type\": \"application/json\",\n              \"user-agent\": \"Meta-Ads-Platform/1.0\"\n            },\n            params: {},\n            query: {},\n            body: {\n              rowIndex: campaign.id,\n              sheet: accountResource ? `ACC:${accountResource.value}` : \"Unknown\",\n              data: {\n                submit: \"ON\",\n                campaign_id: String(campaign.id),\n                campaign_name: campaign.name,\n                objective: campaign.objective,\n                budget_type: \"DAILY\",\n                daily_budget: campaign.budget,\n                page_id: pageResource ? pageResource.value : \"\",\n                instagram_user_id: instagramResource ? instagramResource.value : \"\",\n                whatsapp_number_id: whatsappResource ? whatsappResource.value : \"\",\n                drive_folder_id: campaign.driveFolderId || \"\",\n                message_text: campaign.message || \"\",\n                title_text: campaign.title || \"\",\n                leadgen_form_id: leadformResource ? leadformResource.value : \"\",\n                website_url: campaign.websiteUrl || \"\",\n                status: \"PENDING\",\n                status_detail: \"Enviado ao n8n\",\n                ad_account_id: accountResource ? accountResource.value : \"\",\n                client: `Tenant-${user.tenantId}`\n              },\n              ts: new Date().toISOString()\n            },\n            webhookUrl: settings.n8nWebhookUrl,\n            executionMode: \"production\"\n          }];\n\n          // Send webhook\n          const webhookResponse = await fetch(settings.n8nWebhookUrl, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(webhookPayload),\n          });\n\n          if (!webhookResponse.ok) {\n            console.error(\"Failed to send webhook to n8n:\", await webhookResponse.text());\n          }\n        }\n      } catch (webhookError) {\n        // Log webhook error but don't fail the campaign creation\n        console.error(\"Error sending webhook to n8n:\", webhookError);\n      }\n\n      res.status(201).json(campaign);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Update campaign\n  app.patch(\"/api/campaigns/:id\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const id = parseInt(req.params.id);\n      \n      // Verify campaign belongs to user's tenant\n      const existing = await storage.getCampaign(id);\n      if (!existing || existing.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n\n      // Prevent tenantId override\n      const { tenantId, ...data } = insertCampaignSchema.partial().parse(req.body);\n      \n      const campaign = await storage.updateCampaign(id, data);\n      res.json(campaign);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Delete campaign\n  app.delete(\"/api/campaigns/:id\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const id = parseInt(req.params.id);\n      \n      // Verify campaign belongs to user's tenant\n      const existing = await storage.getCampaign(id);\n      if (!existing || existing.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n\n      await storage.deleteCampaign(id);\n      res.json({ message: \"Campaign deleted successfully\" });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Send campaign to n8n webhook\n  app.post(\"/api/campaigns/:id/send-webhook\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const id = parseInt(req.params.id);\n      \n      // Verify campaign belongs to user's tenant\n      const campaign = await storage.getCampaign(id);\n      if (!campaign || campaign.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n\n      // Get webhook URL\n      const settings = await storage.getAppSettings();\n      if (!settings?.n8nWebhookUrl) {\n        return res.status(400).json({ message: \"Webhook n8n não configurado. Configure em Admin > Configurações\" });\n      }\n\n      // Fetch resource details\n      const accountResource = campaign.accountId ? await storage.getResource(campaign.accountId) : null;\n      const pageResource = campaign.pageId ? await storage.getResource(campaign.pageId) : null;\n      const instagramResource = campaign.instagramId ? await storage.getResource(campaign.instagramId) : null;\n      const whatsappResource = campaign.whatsappId ? await storage.getResource(campaign.whatsappId) : null;\n      const leadformResource = campaign.leadformId ? await storage.getResource(campaign.leadformId) : null;\n\n      // Prepare webhook payload\n      const webhookPayload = [{\n        headers: {\n          \"content-type\": \"application/json\",\n          \"user-agent\": \"Meta-Ads-Platform/1.0\"\n        },\n        params: {},\n        query: {},\n        body: {\n          rowIndex: campaign.id,\n          sheet: accountResource ? `ACC:${accountResource.value}` : \"Unknown\",\n          data: {\n            submit: \"ON\",\n            campaign_id: String(campaign.id),\n            campaign_name: campaign.name,\n            objective: campaign.objective,\n            budget_type: \"DAILY\",\n            daily_budget: campaign.budget,\n            page_id: pageResource ? pageResource.value : \"\",\n            instagram_user_id: instagramResource ? instagramResource.value : \"\",\n            whatsapp_number_id: whatsappResource ? whatsappResource.value : \"\",\n            drive_folder_id: campaign.driveFolderId || \"\",\n            message_text: campaign.message || \"\",\n            title_text: campaign.title || \"\",\n            leadgen_form_id: leadformResource ? leadformResource.value : \"\",\n            website_url: campaign.websiteUrl || \"\",\n            status: campaign.status.toUpperCase(),\n            status_detail: \"Reenviado ao n8n\",\n            ad_account_id: accountResource ? accountResource.value : \"\",\n            client: `Tenant-${user.tenantId}`\n          },\n          ts: new Date().toISOString()\n        },\n        webhookUrl: settings.n8nWebhookUrl,\n        executionMode: \"production\"\n      }];\n\n      // Send webhook\n      const webhookResponse = await fetch(settings.n8nWebhookUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(webhookPayload),\n      });\n\n      if (!webhookResponse.ok) {\n        const errorText = await webhookResponse.text();\n        console.error(\"Failed to send webhook to n8n:\", errorText);\n        \n        // Parse error to provide better user feedback\n        let userMessage = \"Erro ao enviar webhook para n8n\";\n        try {\n          const errorJson = JSON.parse(errorText);\n          if (errorJson.code === 404 || errorJson.message?.includes(\"not registered\")) {\n            userMessage = \"Webhook n8n não está ativo. No n8n, clique em 'Execute workflow' e tente novamente.\";\n          }\n        } catch (e) {\n          // Keep default message if parsing fails\n        }\n        \n        return res.status(500).json({ message: userMessage });\n      }\n\n      res.json({ message: \"Campanha enviada para n8n com sucesso\" });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Send data directly to n8n webhook (for existing campaign form)\n  app.post(\"/api/webhooks/n8n\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      \n      // Get webhook URL\n      const settings = await storage.getAppSettings();\n      if (!settings?.n8nWebhookUrl) {\n        return res.status(400).json({ message: \"Webhook n8n não configurado. Configure em Admin > Configurações\" });\n      }\n\n      // Extract data from request\n      const {\n        objectives,\n        page_id,\n        page_name,\n        instagram_user_id,\n        instagram_name,\n        whatsapp_number_id,\n        whatsapp_name,\n        leadgen_form_id,\n        leadgen_form_name,\n        website_url,\n        drive_folder_id,\n        drive_folder_name,\n        title,\n        message,\n        metadata\n      } = req.body;\n\n      // Prepare webhook payload matching n8n expected format\n      const webhookPayload = [{\n        headers: {\n          \"content-type\": \"application/json\",\n          \"user-agent\": \"Meta-Ads-Platform/1.0\"\n        },\n        params: {},\n        query: {},\n        body: {\n          rowIndex: Date.now(), // Use timestamp as unique identifier\n          sheet: \"EXISTING_CAMPAIGN\",\n          data: {\n            submit: \"ON\",\n            objectives: objectives,\n            page_id: page_id || \"\",\n            page_name: page_name || \"\",\n            instagram_user_id: instagram_user_id || \"\",\n            instagram_name: instagram_name || \"\",\n            whatsapp_number_id: whatsapp_number_id || \"\",\n            whatsapp_name: whatsapp_name || \"\",\n            leadgen_form_id: leadgen_form_id || \"\",\n            leadgen_form_name: leadgen_form_name || \"\",\n            website_url: website_url || \"\",\n            drive_folder_id: drive_folder_id || \"\",\n            drive_folder_name: drive_folder_name || \"\",\n            message_text: message || \"\",\n            title_text: title || \"\",\n            status: \"PENDING\",\n            status_detail: \"Enviado ao n8n (campanha existente)\",\n            client: `Tenant-${user.tenantId}`,\n            form_type: metadata?.form_type || \"existing_campaign\",\n            timestamp: metadata?.timestamp || new Date().toISOString()\n          },\n          ts: new Date().toISOString()\n        },\n        webhookUrl: settings.n8nWebhookUrl,\n        executionMode: \"production\"\n      }];\n\n      // Send webhook\n      const webhookResponse = await fetch(settings.n8nWebhookUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(webhookPayload),\n      });\n\n      if (!webhookResponse.ok) {\n        const errorText = await webhookResponse.text();\n        console.error(\"Failed to send webhook to n8n:\", errorText);\n        \n        // Parse error to provide better user feedback\n        let userMessage = \"Erro ao enviar webhook para n8n\";\n        try {\n          const errorJson = JSON.parse(errorText);\n          if (errorJson.code === 404 || errorJson.message?.includes(\"not registered\")) {\n            userMessage = \"Webhook n8n não está ativo. No n8n, clique em 'Execute workflow' e tente novamente.\";\n          }\n        } catch (e) {\n          // Keep default message if parsing fails\n        }\n        \n        return res.status(500).json({ message: userMessage });\n      }\n\n      res.json({ message: \"Dados enviados para n8n com sucesso\" });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // ===== Integration Routes =====\n\n  // Get all integrations for tenant\n  app.get(\"/api/integrations\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const integrations = await storage.getIntegrationsByTenant(user.tenantId);\n      res.json(integrations);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Get integration by provider\n  app.get(\"/api/integrations/:provider\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const integration = await storage.getIntegrationByProvider(user.tenantId, req.params.provider);\n      \n      if (!integration || integration.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Integration not found\" });\n      }\n\n      res.json(integration);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Create/Update integration\n  app.post(\"/api/integrations\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      \n      // Prevent tenantId override in create/update\n      const { tenantId, ...bodyData } = insertIntegrationSchema.parse(req.body);\n      \n      // Check if integration already exists\n      const existing = await storage.getIntegrationByProvider(user.tenantId, bodyData.provider);\n      \n      if (existing) {\n        // Update existing\n        const updated = await storage.updateIntegration(existing.id, bodyData);\n        return res.json(updated);\n      }\n\n      // Create new\n      const integration = await storage.createIntegration({\n        ...bodyData,\n        tenantId: user.tenantId,\n      });\n\n      res.status(201).json(integration);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Delete integration\n  app.delete(\"/api/integrations/:id\", isAuthenticated, async (req, res, next) => {\n    try {\n      const user = req.user as User;\n      const id = parseInt(req.params.id);\n      \n      // Verify integration belongs to user's tenant\n      const existing = await storage.getIntegration(id);\n      if (!existing || existing.tenantId !== user.tenantId) {\n        return res.status(404).json({ message: \"Integration not found\" });\n      }\n\n      await storage.deleteIntegration(id);\n      res.json({ message: \"Integration deleted successfully\" });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // ====== Admin Settings Routes (admin only) ======\n\n  // Get app settings\n  app.get(\"/api/admin/settings\", isAdmin, async (req, res, next) => {\n    try {\n      const settings = await storage.getAppSettings();\n      // Never expose secrets to frontend\n      if (settings) {\n        res.json({\n          id: settings.id,\n          metaAppId: settings.metaAppId,\n          metaAppSecret: settings.metaAppSecret ? '***configured***' : null,\n          googleClientId: settings.googleClientId,\n          googleClientSecret: settings.googleClientSecret ? '***configured***' : null,\n          n8nWebhookUrl: settings.n8nWebhookUrl,\n          updatedAt: settings.updatedAt,\n        });\n      } else {\n        res.json(null);\n      }\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // Update app settings\n  app.put(\"/api/admin/settings\", isAdmin, async (req, res, next) => {\n    try {\n      const settings = await storage.updateAppSettings(req.body);\n      \n      // Never expose secrets to frontend\n      if (settings) {\n        res.json({\n          id: settings.id,\n          metaAppId: settings.metaAppId,\n          metaAppSecret: settings.metaAppSecret ? '***configured***' : null,\n          googleClientId: settings.googleClientId,\n          googleClientSecret: settings.googleClientSecret ? '***configured***' : null,\n          n8nWebhookUrl: settings.n8nWebhookUrl,\n          updatedAt: settings.updatedAt,\n        });\n      } else {\n        res.status(500).json({ message: \"Failed to update settings\" });\n      }\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  // ====== Meta OAuth Routes ======\n\n  // Generate appsecret_proof for Meta API calls (security)\n  function generateAppSecretProof(accessToken: string, appSecret: string): string {\n    return crypto.createHmac('sha256', appSecret)\n      .update(accessToken)\n      .digest('hex');\n  }\n\n  // Initiate Meta OAuth flow\n  app.get(\"/auth/meta\", isAuthenticated, async (req, res) => {\n    try {\n      const settings = await storage.getAppSettings();\n      if (!settings?.metaAppId) {\n        return res.status(500).send(\"Meta OAuth not configured. Please contact admin.\");\n      }\n\n      const user = req.user as User;\n      \n      // Save user info in session for callback\n      req.session.oauthUserId = user.id;\n      req.session.oauthTenantId = user.tenantId;\n      \n      await new Promise<void>((resolve, reject) => {\n        req.session.save((err) => {\n          if (err) reject(err);\n          else resolve();\n        });\n      });\n\n      const redirectUri = `${req.protocol}://${req.get('host')}/auth/meta/callback`;\n      const scope = \"ads_read,pages_read_engagement,instagram_basic,whatsapp_business_management,leads_retrieval\";\n      \n      const authUrl = `https://www.facebook.com/v18.0/dialog/oauth?` +\n        `client_id=${settings.metaAppId}&` +\n        `redirect_uri=${encodeURIComponent(redirectUri)}&` +\n        `scope=${scope}&` +\n        `state=${user.id}`;\n\n      res.redirect(authUrl);\n    } catch (err) {\n      console.error(\"Meta OAuth error:\", err);\n      res.status(500).send(\"Failed to initiate OAuth\");\n    }\n  });\n\n  // Meta OAuth callback\n  app.get(\"/auth/meta/callback\", async (req, res) => {\n    try {\n      const { code, state } = req.query;\n      \n      // Get user info from session\n      const userId = req.session.oauthUserId;\n      const tenantId = req.session.oauthTenantId;\n\n      if (!code || !userId || !tenantId || state !== String(userId)) {\n        return res.status(400).send(\"Invalid OAuth callback\");\n      }\n\n      const settings = await storage.getAppSettings();\n      if (!settings?.metaAppId || !settings.metaAppSecret) {\n        return res.status(500).send(\"Meta OAuth not configured\");\n      }\n\n      const redirectUri = `${req.protocol}://${req.get('host')}/auth/meta/callback`;\n\n      // Exchange code for access token\n      const tokenUrl = `https://graph.facebook.com/v18.0/oauth/access_token?` +\n        `client_id=${settings.metaAppId}&` +\n        `client_secret=${settings.metaAppSecret}&` +\n        `redirect_uri=${encodeURIComponent(redirectUri)}&` +\n        `code=${code}`;\n\n      const tokenResponse = await fetch(tokenUrl);\n      const tokenData: any = await tokenResponse.json();\n\n      if (!tokenData.access_token) {\n        console.error(\"Token exchange failed:\", tokenData);\n        return res.status(500).send(\"Failed to obtain access token\");\n      }\n\n      const accessToken = tokenData.access_token;\n      const appSecretProof = generateAppSecretProof(accessToken, settings.metaAppSecret);\n\n      // Fetch user's accounts\n      const accountsUrl = `https://graph.facebook.com/v18.0/me/adaccounts?` +\n        `access_token=${accessToken}&` +\n        `appsecret_proof=${appSecretProof}&` +\n        `fields=id,name`;\n        \n      const accountsResponse = await fetch(accountsUrl);\n      const accountsData: any = await accountsResponse.json();\n\n      // Save ad accounts\n      if (accountsData.data && accountsData.data.length > 0) {\n        for (const account of accountsData.data) {\n          await storage.createResource({\n            tenantId,\n            type: \"account\",\n            name: account.name || \"Ad Account\",\n            value: account.id,\n          });\n        }\n      }\n\n      // Fetch pages\n      const pagesUrl = `https://graph.facebook.com/v18.0/me/accounts?` +\n        `access_token=${accessToken}&` +\n        `appsecret_proof=${appSecretProof}&` +\n        `fields=id,name,instagram_business_account`;\n\n      const pagesResponse = await fetch(pagesUrl);\n      const pagesData: any = await pagesResponse.json();\n\n      // Save pages and Instagram accounts\n      if (pagesData.data && pagesData.data.length > 0) {\n        for (const page of pagesData.data) {\n          // Save page\n          await storage.createResource({\n            tenantId,\n            type: \"page\",\n            name: page.name || \"Facebook Page\",\n            value: page.id,\n          });\n\n          // Save Instagram account if connected\n          if (page.instagram_business_account?.id) {\n            await storage.createResource({\n              tenantId,\n              type: \"instagram\",\n              name: `Instagram - ${page.name}`,\n              value: page.instagram_business_account.id,\n            });\n          }\n        }\n      }\n\n      // TODO: Fetch WhatsApp numbers and lead forms\n      // This requires additional API calls with specific permissions\n\n      // Save access token in integrations table for future use\n      await storage.createIntegration({\n        tenantId,\n        provider: \"Meta\",\n        config: { accessToken, tokenType: tokenData.token_type },\n        status: \"connected\",\n      });\n\n      // Redirect back to resources page\n      res.redirect(\"/resources?oauth=success\");\n    } catch (err) {\n      console.error(\"Meta OAuth callback error:\", err);\n      res.status(500).send(\"Failed to complete OAuth\");\n    }\n  });\n\n  // ====== Google Drive OAuth Routes ======\n\n  // Initiate Google OAuth flow\n  app.get(\"/auth/google\", isAuthenticated, async (req, res) => {\n    try {\n      const settings = await storage.getAppSettings();\n      if (!settings?.googleClientId) {\n        return res.status(500).send(\"Google OAuth not configured. Please contact admin.\");\n      }\n\n      const user = req.user as User;\n      \n      // Save user info in session for callback\n      req.session.oauthUserId = user.id;\n      req.session.oauthTenantId = user.tenantId;\n      \n      await new Promise<void>((resolve, reject) => {\n        req.session.save((err) => {\n          if (err) reject(err);\n          else resolve();\n        });\n      });\n\n      const redirectUri = `${req.protocol}://${req.get('host')}/auth/google/callback`;\n      const scope = \"https://www.googleapis.com/auth/drive.readonly\";\n      \n      const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?` +\n        `client_id=${settings.googleClientId}&` +\n        `redirect_uri=${encodeURIComponent(redirectUri)}&` +\n        `response_type=code&` +\n        `scope=${encodeURIComponent(scope)}&` +\n        `access_type=offline&` +\n        `state=${user.id}`;\n\n      res.redirect(authUrl);\n    } catch (err) {\n      console.error(\"Google OAuth error:\", err);\n      res.status(500).send(\"Failed to initiate OAuth\");\n    }\n  });\n\n  // Google OAuth callback\n  app.get(\"/auth/google/callback\", async (req, res) => {\n    try {\n      const { code, state } = req.query;\n      \n      // Get user info from session\n      const userId = req.session.oauthUserId;\n      const tenantId = req.session.oauthTenantId;\n\n      if (!code || !userId || !tenantId || state !== String(userId)) {\n        return res.status(400).send(\"Invalid OAuth callback\");\n      }\n\n      const settings = await storage.getAppSettings();\n      if (!settings?.googleClientId || !settings.googleClientSecret) {\n        return res.status(500).send(\"Google OAuth not configured\");\n      }\n\n      const redirectUri = `${req.protocol}://${req.get('host')}/auth/google/callback`;\n\n      // Exchange code for access token\n      const tokenResponse = await fetch(\"https://oauth2.googleapis.com/token\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          code,\n          client_id: settings.googleClientId,\n          client_secret: settings.googleClientSecret,\n          redirect_uri: redirectUri,\n          grant_type: \"authorization_code\",\n        }),\n      });\n\n      const tokenData: any = await tokenResponse.json();\n\n      if (!tokenData.access_token) {\n        console.error(\"Token exchange failed:\", tokenData);\n        return res.status(500).send(\"Failed to obtain access token\");\n      }\n\n      // Save access token in integrations table\n      await storage.createIntegration({\n        tenantId,\n        provider: \"Google Drive\",\n        config: { \n          accessToken: tokenData.access_token,\n          refreshToken: tokenData.refresh_token,\n          tokenType: tokenData.token_type,\n          expiresIn: tokenData.expires_in,\n        },\n        status: \"connected\",\n      });\n\n      // Redirect back to integrations page\n      res.redirect(\"/integrations?oauth=success\");\n    } catch (err) {\n      console.error(\"Google OAuth callback error:\", err);\n      res.status(500).send(\"Failed to complete OAuth\");\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":35499},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/examples/Onboarding.tsx":{"content":"import Onboarding from \"../../pages/Onboarding\";\n\nexport default function OnboardingExample() {\n  return <Onboarding />;\n}\n","size_bytes":123},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/Audiences.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Upload } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface Audience {\n  id: number;\n  tenantId: number;\n  name: string;\n  type: string;\n  ageMin: number | null;\n  ageMax: number | null;\n  interests: string[];\n  behaviors: string[];\n  locations: string[];\n}\n\nexport default function Audiences() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [newAudience, setNewAudience] = useState({\n    name: \"\",\n    ageMin: \"\",\n    ageMax: \"\",\n    interests: \"\",\n    behaviors: \"\",\n    locations: \"\",\n  });\n  const { toast } = useToast();\n\n  const { data: audiences = [], isLoading } = useQuery<Audience[]>({\n    queryKey: [\"/api/audiences\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: {\n      name: string;\n      type: string;\n      ageMin: number | null;\n      ageMax: number | null;\n      interests: string[];\n      behaviors: string[];\n      locations: string[];\n    }) => apiRequest(\"POST\", \"/api/audiences\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audiences\"] });\n      setIsDialogOpen(false);\n      setNewAudience({ name: \"\", ageMin: \"\", ageMax: \"\", interests: \"\", behaviors: \"\", locations: \"\" });\n      toast({\n        title: \"Público criado com sucesso\",\n        description: \"O público foi adicionado à sua lista\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao criar público\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/audiences/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audiences\"] });\n      toast({\n        title: \"Público excluído\",\n        description: \"O público foi removido com sucesso\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao excluir público\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const locations = newAudience.locations\n      .split(\"\\n\")\n      .map((loc) => loc.trim())\n      .filter((loc) => loc.length > 0);\n\n    const data = {\n      name: newAudience.name,\n      type: \"interesse\", // default type\n      ageMin: newAudience.ageMin ? parseInt(newAudience.ageMin) : null,\n      ageMax: newAudience.ageMax ? parseInt(newAudience.ageMax) : null,\n      interests: newAudience.interests\n        .split(\",\")\n        .map((i) => i.trim())\n        .filter((i) => i.length > 0),\n      behaviors: newAudience.behaviors\n        .split(\",\")\n        .map((b) => b.trim())\n        .filter((b) => b.length > 0),\n      locations: locations,\n    };\n\n    createMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Públicos-Alvo</h1>\n          <p className=\"text-muted-foreground\">Gerencie seus perfis de audiência para campanhas</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-new-audience\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Novo Público\n          </Button>\n        </div>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">Carregando públicos...</p>\n        </div>\n      ) : audiences.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">Nenhum público cadastrado</p>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Clique em \"Novo Público\" para criar seu primeiro público-alvo\n          </p>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {audiences.map((audience) => (\n            <Card key={audience.id} data-testid={`card-audience-${audience.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-base mb-2\">{audience.name}</CardTitle>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {audience.ageMin && audience.ageMax && (\n                  <div className=\"text-sm\">\n                    <span className=\"text-muted-foreground\">Idade:</span>\n                    <span className=\"ml-2 font-medium\">\n                      {audience.ageMin} - {audience.ageMax} anos\n                    </span>\n                  </div>\n                )}\n                {audience.interests && audience.interests.length > 0 && (\n                  <div className=\"text-sm\">\n                    <span className=\"text-muted-foreground\">Interesses:</span>\n                    <div className=\"mt-1 flex flex-wrap gap-1\">\n                      {audience.interests.map((interest, i) => (\n                        <Badge key={i} variant=\"secondary\" className=\"text-xs\">\n                          {interest}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                {audience.behaviors && audience.behaviors.length > 0 && (\n                  <div className=\"text-sm\">\n                    <span className=\"text-muted-foreground\">Comportamentos:</span>\n                    <div className=\"mt-1 flex flex-wrap gap-1\">\n                      {audience.behaviors.map((behavior, i) => (\n                        <Badge key={i} variant=\"secondary\" className=\"text-xs\">\n                          {behavior}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                {audience.locations && audience.locations.length > 0 && (\n                  <div className=\"text-sm\">\n                    <span className=\"text-muted-foreground\">Localizações:</span>\n                    <div className=\"mt-1 flex flex-wrap gap-1\">\n                      {audience.locations.map((location, i) => (\n                        <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                          {location}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                <div className=\"flex gap-2 pt-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={() => deleteMutation.mutate(audience.id)}\n                    data-testid={`button-delete-audience-${audience.id}`}\n                  >\n                    Excluir\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Criar Novo Público</DialogTitle>\n            <DialogDescription>\n              Defina os critérios de segmentação para sua audiência\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit}>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"audience-name\">Nome do Público *</Label>\n                <Input\n                  id=\"audience-name\"\n                  placeholder=\"Ex: Público Leads 25-45\"\n                  value={newAudience.name}\n                  onChange={(e) => setNewAudience({ ...newAudience, name: e.target.value })}\n                  data-testid=\"input-audience-name\"\n                  required\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"age-min\">Idade Mínima</Label>\n                  <Input\n                    id=\"age-min\"\n                    type=\"number\"\n                    placeholder=\"18\"\n                    value={newAudience.ageMin}\n                    onChange={(e) => setNewAudience({ ...newAudience, ageMin: e.target.value })}\n                    data-testid=\"input-age-min\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"age-max\">Idade Máxima</Label>\n                  <Input\n                    id=\"age-max\"\n                    type=\"number\"\n                    placeholder=\"65\"\n                    value={newAudience.ageMax}\n                    onChange={(e) => setNewAudience({ ...newAudience, ageMax: e.target.value })}\n                    data-testid=\"input-age-max\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"interests\">Interesses (separados por vírgula)</Label>\n                <Textarea\n                  id=\"interests\"\n                  placeholder=\"Marketing Digital, Empreendedorismo, Vendas\"\n                  rows={3}\n                  value={newAudience.interests}\n                  onChange={(e) => setNewAudience({ ...newAudience, interests: e.target.value })}\n                  data-testid=\"input-interests\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"behaviors\">Comportamentos (separados por vírgula)</Label>\n                <Textarea\n                  id=\"behaviors\"\n                  placeholder=\"Compradores online, Viajantes frequentes\"\n                  rows={3}\n                  value={newAudience.behaviors}\n                  onChange={(e) => setNewAudience({ ...newAudience, behaviors: e.target.value })}\n                  data-testid=\"input-behaviors\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"locations\">Localizações (separadas por vírgula) *</Label>\n                <Textarea\n                  id=\"locations\"\n                  placeholder=\"São Paulo, SP, Brasil&#10;Rio de Janeiro, RJ, Brasil&#10;Brasil\"\n                  rows={3}\n                  value={newAudience.locations}\n                  onChange={(e) => setNewAudience({ ...newAudience, locations: e.target.value })}\n                  data-testid=\"input-locations\"\n                  required\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Digite cidades, estados ou países separados por vírgula. Exemplos: \"Brasil\" ou \"São Paulo, SP, Brasil\"\n                </p>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsDialogOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancelar\n              </Button>\n              <Button type=\"submit\" data-testid=\"button-save-audience\" disabled={createMutation.isPending}>\n                {createMutation.isPending ? \"Criando...\" : \"Criar Público\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":12069},"client/src/components/examples/ExistingCampaignForm.tsx":{"content":"import ExistingCampaignForm from \"../../pages/ExistingCampaignForm\";\n\nexport default function ExistingCampaignFormExample() {\n  return <ExistingCampaignForm />;\n}\n","size_bytes":163},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/StatusBadge.tsx":{"content":"import { CheckCircle2, AlertCircle, XCircle } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ntype Status = \"connected\" | \"pending\" | \"error\";\n\ninterface StatusBadgeProps {\n  status: Status;\n  label?: string;\n}\n\nexport default function StatusBadge({ status, label }: StatusBadgeProps) {\n  const config = {\n    connected: {\n      icon: CheckCircle2,\n      text: label || \"Conectado\",\n      className: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\",\n    },\n    pending: {\n      icon: AlertCircle,\n      text: label || \"Pendente\",\n      className: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400\",\n    },\n    error: {\n      icon: XCircle,\n      text: label || \"Erro\",\n      className: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400\",\n    },\n  };\n\n  const { icon: Icon, text, className } = config[status];\n\n  return (\n    <Badge variant=\"outline\" className={className} data-testid={`badge-status-${status}`}>\n      <Icon className=\"w-3 h-3 mr-1\" />\n      {text}\n    </Badge>\n  );\n}\n","size_bytes":1064},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Resources from \"@/pages/Resources\";\nimport CampaignForm from \"@/pages/CampaignForm\";\nimport ExistingCampaignForm from \"@/pages/ExistingCampaignForm\";\nimport Campaigns from \"@/pages/Campaigns\";\nimport Audiences from \"@/pages/Audiences\";\nimport Integrations from \"@/pages/Integrations\";\nimport Onboarding from \"@/pages/Onboarding\";\nimport Admin from \"@/pages/Admin\";\nimport Login from \"@/pages/Login\";\nimport Register from \"@/pages/Register\";\nimport NotFound from \"@/pages/not-found\";\nimport { AuthProvider, useAuth } from \"@/contexts/AuthContext\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/campaigns\" component={Campaigns} />\n      <Route path=\"/campaigns/new\" component={CampaignForm} />\n      <Route path=\"/campaigns/existing\" component={ExistingCampaignForm} />\n      <Route path=\"/audiences\" component={Audiences} />\n      <Route path=\"/resources\" component={Resources} />\n      <Route path=\"/integrations\" component={Integrations} />\n      <Route path=\"/onboarding\" component={Onboarding} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction PublicRouter() {\n  return (\n    <Switch>\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\" component={Login} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <PublicRouter />;\n  }\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <h2 className=\"text-lg font-semibold\">Meta Ads Campaign Manager</h2>\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            <Router />\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <AppContent />\n          <Toaster />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3266},"client/src/components/examples/Dashboard.tsx":{"content":"import Dashboard from \"../../pages/Dashboard\";\n\nexport default function DashboardExample() {\n  return <Dashboard />;\n}\n","size_bytes":119},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/Campaigns.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Pause, Play, Trash2, Send } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface Campaign {\n  id: number;\n  tenantId: number;\n  name: string;\n  objective: string;\n  status: string;\n  budget: string;\n  accountId: number | null;\n  pageId: number | null;\n  instagramId: number | null;\n  whatsappId: number | null;\n  leadformId: number | null;\n  websiteUrl: string | null;\n  audienceIds: number[];\n  title: string | null;\n  message: string | null;\n}\n\nexport default function Campaigns() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: campaigns = [], isLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  const toggleStatusMutation = useMutation({\n    mutationFn: ({ id, status }: { id: number; status: string }) =>\n      apiRequest(\"PATCH\", `/api/campaigns/${id}`, { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({\n        title: \"Status atualizado\",\n        description: \"O status da campanha foi alterado com sucesso\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao atualizar status\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/campaigns/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({\n        title: \"Campanha excluída\",\n        description: \"A campanha foi removida com sucesso\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao excluir campanha\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendWebhookMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"POST\", `/api/campaigns/${id}/send-webhook`, {}),\n    onSuccess: () => {\n      toast({\n        title: \"Webhook enviado\",\n        description: \"Campanha enviada para n8n com sucesso\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao enviar webhook\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleStatus = (campaign: Campaign) => {\n    const newStatus = campaign.status === \"active\" ? \"paused\" : \"active\";\n    toggleStatusMutation.mutate({ id: campaign.id, status: newStatus });\n  };\n\n  const objectiveLabels: Record<string, string> = {\n    LEAD: \"Geração de Leads\",\n    TRAFFIC: \"Tráfego\",\n    WHATSAPP: \"WhatsApp\",\n    CONVERSIONS: \"Conversões\",\n    REACH: \"Alcance\",\n  };\n\n  const statusLabels: Record<string, string> = {\n    draft: \"Rascunho\",\n    active: \"Ativa\",\n    paused: \"Pausada\",\n    completed: \"Concluída\",\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Campanhas</h1>\n          <p className=\"text-muted-foreground\">Gerencie todas as suas campanhas Meta Ads</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation(\"/campaigns/existing\")}\n            data-testid=\"button-add-to-existing\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Adicionar a Campanha Existente\n          </Button>\n          <Button onClick={() => setLocation(\"/campaigns/new\")} data-testid=\"button-new-campaign\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Nova Campanha\n          </Button>\n        </div>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">Carregando campanhas...</p>\n        </div>\n      ) : campaigns.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Nenhuma campanha cadastrada</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Clique em \"Nova Campanha\" para criar sua primeira campanha\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Todas as Campanhas</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">\n                      Nome\n                    </th>\n                    <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">\n                      Objetivo\n                    </th>\n                    <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">\n                      Status\n                    </th>\n                    <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">\n                      Orçamento\n                    </th>\n                    <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">\n                      Ações\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {campaigns.map((campaign) => (\n                    <tr\n                      key={campaign.id}\n                      className=\"border-b hover-elevate\"\n                      data-testid={`row-campaign-${campaign.id}`}\n                    >\n                      <td className=\"py-4 px-4 font-medium\">{campaign.name}</td>\n                      <td className=\"py-4 px-4\">\n                        <Badge variant=\"outline\">\n                          {objectiveLabels[campaign.objective] || campaign.objective}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-4\">\n                        <Badge\n                          variant={\n                            campaign.status === \"active\"\n                              ? \"default\"\n                              : campaign.status === \"draft\"\n                              ? \"secondary\"\n                              : \"outline\"\n                          }\n                        >\n                          {statusLabels[campaign.status] || campaign.status}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-4 font-mono text-sm\">{campaign.budget}</td>\n                      <td className=\"py-4 px-4\">\n                        <div className=\"flex justify-end gap-1\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            onClick={() => sendWebhookMutation.mutate(campaign.id)}\n                            data-testid={`button-send-webhook-${campaign.id}`}\n                            title=\"Enviar para n8n\"\n                          >\n                            <Send className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            onClick={() => {\n                              toast({\n                                title: \"Em desenvolvimento\",\n                                description: \"Edição de campanha em breve\",\n                              });\n                            }}\n                            data-testid={`button-edit-campaign-${campaign.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            onClick={() => handleToggleStatus(campaign)}\n                            data-testid={`button-toggle-campaign-${campaign.id}`}\n                          >\n                            {campaign.status === \"active\" ? (\n                              <Pause className=\"h-4 w-4\" />\n                            ) : (\n                              <Play className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            onClick={() => deleteMutation.mutate(campaign.id)}\n                            data-testid={`button-delete-campaign-${campaign.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":9546},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ResourceCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Edit, Trash2 } from \"lucide-react\";\n\ninterface ResourceCardProps {\n  title: string;\n  label: string;\n  value: string;\n  onEdit: () => void;\n  onDelete: () => void;\n}\n\nexport default function ResourceCard({ title, label, value, onEdit, onDelete }: ResourceCardProps) {\n  return (\n    <Card data-testid={`card-resource-${title.toLowerCase()}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-base font-medium\">{title}</CardTitle>\n        <div className=\"flex gap-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onEdit}\n            data-testid=\"button-edit\"\n            className=\"h-8 w-8\"\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onDelete}\n            data-testid=\"button-delete\"\n            className=\"h-8 w-8\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-sm text-muted-foreground mb-1\">{label}</div>\n        <div className=\"font-mono text-sm\">{value}</div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1397},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 210 12% 16%;\n\n  --border: 210 8% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 210 12% 16%;\n\n  --card-border: 210 8% 90%;\n\n  --sidebar: 210 6% 94%;\n\n  --sidebar-foreground: 210 12% 16%;\n\n  --sidebar-border: 210 8% 86%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 210 10% 88%;\n\n  --sidebar-accent-foreground: 210 12% 16%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 210 12% 16%;\n\n  --popover-border: 210 8% 84%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 10% 86%;\n\n  --secondary-foreground: 210 12% 16%;\n\n  --muted: 210 12% 90%;\n\n  --muted-foreground: 210 10% 40%;\n\n  --accent: 210 14% 89%;\n\n  --accent-foreground: 210 12% 16%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 210 12% 70%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 271 81% 56%;\n  --chart-3: 142 76% 36%;\n  --chart-4: 24 95% 53%;\n  --chart-5: 340 82% 52%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 12% 16% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 12% 16% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(210 12% 16% / 0.06), 0px 1px 2px -1px hsl(210 12% 16% / 0.04);\n  --shadow: 0px 4px 6px 0px hsl(210 12% 16% / 0.07), 0px 2px 4px -1px hsl(210 12% 16% / 0.05);\n  --shadow-md: 0px 6px 8px 0px hsl(210 12% 16% / 0.08), 0px 4px 6px -1px hsl(210 12% 16% / 0.06);\n  --shadow-lg: 0px 10px 15px 0px hsl(210 12% 16% / 0.10), 0px 6px 8px -2px hsl(210 12% 16% / 0.07);\n  --shadow-xl: 0px 20px 25px 0px hsl(210 12% 16% / 0.12), 0px 10px 15px -3px hsl(210 12% 16% / 0.08);\n  --shadow-2xl: 0px 25px 50px 0px hsl(210 12% 16% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 6% 9%;\n\n  --foreground: 210 6% 93%;\n\n  --border: 210 6% 18%;\n\n  --card: 210 6% 12%;\n\n  --card-foreground: 210 6% 93%;\n\n  --card-border: 210 6% 20%;\n\n  --sidebar: 210 6% 15%;\n\n  --sidebar-foreground: 210 6% 93%;\n\n  --sidebar-border: 210 6% 22%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 210 10% 20%;\n\n  --sidebar-accent-foreground: 210 6% 93%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 210 6% 18%;\n\n  --popover-foreground: 210 6% 93%;\n\n  --popover-border: 210 6% 24%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 10% 22%;\n\n  --secondary-foreground: 210 6% 93%;\n\n  --muted: 210 12% 19%;\n\n  --muted-foreground: 210 10% 70%;\n\n  --accent: 210 14% 20%;\n\n  --accent-foreground: 210 6% 93%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 210 12% 40%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 70%;\n  --chart-2: 271 81% 70%;\n  --chart-3: 142 76% 50%;\n  --chart-4: 24 95% 65%;\n  --chart-5: 340 82% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.15);\n  --shadow: 0px 4px 6px 0px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.18);\n  --shadow-md: 0px 6px 8px 0px hsl(0 0% 0% / 0.28), 0px 4px 6px -1px hsl(0 0% 0% / 0.20);\n  --shadow-lg: 0px 10px 15px 0px hsl(0 0% 0% / 0.32), 0px 6px 8px -2px hsl(0 0% 0% / 0.24);\n  --shadow-xl: 0px 20px 25px 0px hsl(0 0% 0% / 0.36), 0px 10px 15px -3px hsl(0 0% 0% / 0.28);\n  --shadow-2xl: 0px 25px 50px 0px hsl(0 0% 0% / 0.40);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11196},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/examples/CampaignForm.tsx":{"content":"import CampaignForm from \"../../pages/CampaignForm\";\n\nexport default function CampaignFormExample() {\n  return <CampaignForm />;\n}\n","size_bytes":131},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/examples/ResourceCard.tsx":{"content":"import ResourceCard from \"../ResourceCard\";\n\nexport default function ResourceCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      <ResourceCard\n        title=\"Meta Ad Account\"\n        label=\"Account ID\"\n        value=\"act_123456789\"\n        onEdit={() => console.log(\"Edit clicked\")}\n        onDelete={() => console.log(\"Delete clicked\")}\n      />\n    </div>\n  );\n}\n","size_bytes":421},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/examples/Login.tsx":{"content":"import Login from \"../../pages/Login\";\n\nexport default function LoginExample() {\n  return <Login onLogin={() => console.log(\"Login successful\")} />;\n}\n","size_bytes":151},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/examples/Integrations.tsx":{"content":"import Integrations from \"../../pages/Integrations\";\n\nexport default function IntegrationsExample() {\n  return <Integrations />;\n}\n","size_bytes":131},"design_guidelines.md":{"content":"# Design Guidelines: Meta Ads Campaign Management Platform\n\n## Design Approach\n\n**Selected System**: Microsoft Fluent Design System\n**Justification**: Enterprise productivity application requiring efficiency, clarity, and data-dense interfaces. Fluent's emphasis on information hierarchy, form design, and table management aligns perfectly with campaign management workflows.\n\n**Core Design Principles**:\n- Clarity over decoration: Every element serves a functional purpose\n- Efficient workflows: Minimize clicks and cognitive load for repetitive tasks\n- Progressive disclosure: Show complexity only when needed\n- Consistent patterns: Users learn once, apply everywhere\n\n---\n\n## Typography System\n\n**Font Family**: \n- Primary: 'Inter' (Google Fonts) - excellent readability for data-heavy screens\n- Monospace: 'JetBrains Mono' (Google Fonts) - for IDs, API responses, technical data\n\n**Type Scale**:\n- Headings (H1): text-3xl font-semibold (dashboard titles, page headers)\n- Headings (H2): text-2xl font-semibold (section headers, wizard steps)\n- Headings (H3): text-xl font-medium (card titles, form sections)\n- Body Large: text-base font-normal (primary content, form inputs)\n- Body Small: text-sm font-normal (help text, secondary information)\n- Caption: text-xs font-normal (timestamps, metadata, table footnotes)\n- Labels: text-sm font-medium (form labels, navigation items)\n\n**Line Height**: Use default Tailwind leading classes (leading-tight for headings, leading-normal for body)\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of **2, 4, 6, 8, 12, 16** consistently\n- Component internal spacing: p-4, p-6\n- Section spacing: py-8, py-12, py-16\n- Card gaps: gap-4, gap-6\n- Form field spacing: space-y-4\n- Grid gaps: gap-6, gap-8\n\n**Container Strategy**:\n- Dashboard/App Shell: Full width with max-w-screen-2xl mx-auto px-6\n- Forms/Wizards: max-w-3xl mx-auto for optimal focus\n- Settings Panels: max-w-4xl mx-auto\n- Modal dialogs: max-w-2xl\n\n**Grid Systems**:\n- Configuration cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\n- Form layouts: Two-column on desktop (grid-cols-2 gap-6), single on mobile\n- Dashboard metrics: grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\n\n---\n\n## Component Library\n\n### Navigation & Shell\n**Top Navigation Bar**: \n- Height: h-16\n- Sticky positioning (sticky top-0 z-50)\n- Logo (left), navigation links (center), user menu + notifications (right)\n- Shadow: shadow-sm\n\n**Sidebar Navigation** (for main app areas):\n- Width: w-64 (collapsible to w-16 on mobile)\n- Fixed positioning on desktop, drawer on mobile\n- Navigation groups with section headers (text-xs uppercase tracking-wide)\n- Active state: subtle background treatment with left border accent\n\n### Forms & Inputs\n**Form Structure**:\n- Clear section divisions with border separator\n- Field groups with descriptive headers\n- Consistent spacing (space-y-6 between sections, space-y-4 within sections)\n\n**Input Fields**:\n- Standard height: h-11\n- Border: border rounded-lg\n- Focus ring: ring-2 ring-offset-2\n- Labels above inputs with required indicator (*)\n- Help text below (text-sm with muted treatment)\n- Error states with icon + message below field\n\n**Select Dropdowns**:\n- Match input height (h-11)\n- Chevron icon on right\n- Search functionality for long lists (leadgen_forms, resources)\n\n**Buttons**:\n- Primary: h-11 px-6 rounded-lg font-medium\n- Secondary: h-11 px-6 rounded-lg font-medium with border\n- Icon buttons: h-9 w-9 rounded-lg\n- Ghost buttons: h-9 px-4 rounded-lg (no background)\n\n**Multi-Step Wizard**:\n- Progress indicator at top showing steps (1/2, 2/2)\n- Step circles with connecting line\n- Current step highlighted, completed steps with checkmark\n- Navigation: Back (ghost button) + Continue/Finish (primary button)\n- Max width: max-w-3xl\n\n### Data Display\n**Cards**:\n- Standard padding: p-6\n- Border with rounded-xl\n- Shadow: shadow-sm on hover (hover:shadow-md transition)\n- Header with title (text-lg font-semibold) + action button/menu\n\n**Status Indicators**:\n- Connection status (green/yellow/red): \n  - Circular badge (h-3 w-3) with animated pulse for pending\n  - Icon + text label combination for accessibility\n  - Positioned in card header or inline with resource name\n\n**Tables** (Campaign list, configuration management):\n- Sticky header (thead sticky top-0)\n- Alternating row treatment for readability\n- Row actions on hover (edit/delete icons)\n- Cell padding: px-6 py-4\n- Sortable columns with icon indicator\n- Pagination controls at bottom (showing \"1-10 of 50\")\n\n**Metrics Cards** (Dashboard KPIs):\n- Compact size: p-4\n- Large number display (text-3xl font-bold)\n- Label below (text-sm)\n- Optional trend indicator (+/- percentage with small arrow icon)\n- Icon in top-right corner for visual identification\n\n### Overlays\n**Modal Dialogs**:\n- Backdrop overlay with backdrop-blur-sm\n- Modal: rounded-xl shadow-2xl\n- Header: px-6 py-4 with border-b\n- Content: px-6 py-4\n- Footer: px-6 py-4 with border-t, buttons right-aligned\n\n**Toast Notifications**:\n- Fixed position (top-right): top-4 right-4\n- Width: w-96\n- Rounded: rounded-lg shadow-lg\n- Auto-dismiss after 5s\n- Types: success (checkmark icon), error (X icon), info (i icon), warning (! icon)\n- Close button (X) in top-right\n\n**Confirmation Dialogs**:\n- Small modal (max-w-md)\n- Icon at top (warning/question)\n- Clear action buttons (Cancel + Confirm with destructive styling for delete actions)\n\n---\n\n## Page-Specific Layouts\n\n### Dashboard\n- Header with page title + date range selector (right-aligned)\n- Metrics row (4 KPI cards in grid)\n- Campaigns table with filters above (search + objective dropdown + status dropdown)\n- Empty state when no campaigns: centered illustration + CTA button\n\n### Onboarding Wizard\n- Centered layout (max-w-3xl)\n- Step indicator at top\n- Large card with step content\n- Connection test button with loading spinner\n- Status feedback immediately visible after test\n\n### Configuration/Resources Page\n- Split layout: Sidebar menu (different resource types) + Main content area\n- Resource list with add button in header\n- Each resource card shows: name/label, IDs, edit/delete actions\n- Form to add/edit opens in slide-over panel from right\n\n### Campaign Form (Create/Edit)\n- Sticky header with form title + Save/Discard buttons\n- Scrollable content area\n- Sections: Campaign Details, Targeting (with audience selector), Creative (with Drive folder selector), Budget & Schedule\n- Conditional fields appear/hide based on objective selection\n- Preview panel (optional on desktop > lg: split view)\n\n---\n\n## Icons\n**Library**: Heroicons (via CDN)\n- Use outline variant for navigation and neutral states\n- Use solid variant for active states and filled indicators\n- Common icons needed: check-circle, x-circle, exclamation-circle, cog, chart-bar, folder, link, users, calendar, currency-dollar\n\n---\n\n## Accessibility\n- All form inputs have associated labels (not just placeholders)\n- Focus indicators clearly visible (ring-2)\n- Status indicators use icon + text (not color alone)\n- Sufficient contrast ratios throughout\n- Keyboard navigation supported (tab order, Enter to submit)\n- Loading states announced with aria-live regions\n- Error messages associated with fields via aria-describedby\n\n---\n\n## Animations\n**Minimal and Purposeful**:\n- Page transitions: None (instant navigation for productivity)\n- Loading states: Subtle spinner (animate-spin) for async operations\n- Hover states: shadow and scale (hover:shadow-md transition-shadow duration-200)\n- Toast entrance: Slide from right (animate-slide-in-right)\n- Status changes: Fade transition (transition-opacity duration-300)\n\n**No Animations**:\n- Parallax effects\n- Scroll-triggered animations\n- Decorative motion\n\n---\n\n## Images\nThis application does not require hero images or marketing visuals. Focus on:\n- Placeholder illustrations for empty states (use Undraw or similar via CDN)\n- Company logo in navigation\n- User avatar in top-right menu\n- Optional: small icons/illustrations in onboarding steps for visual guidance","size_bytes":8011},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, serial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Tenants table for multi-tenancy\nexport const tenants = pgTable(\"tenants\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertTenantSchema = createInsertSchema(tenants).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertTenant = z.infer<typeof insertTenantSchema>;\nexport type Tenant = typeof tenants.$inferSelect;\n\n// Users table with tenant association and RBAC\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  tenantId: integer(\"tenant_id\").notNull().references(() => tenants.id),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"), // admin, manager, user\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Resources table - stores Meta Ads resources per tenant\nexport const resources = pgTable(\"resources\", {\n  id: serial(\"id\").primaryKey(),\n  tenantId: integer(\"tenant_id\").notNull().references(() => tenants.id),\n  type: text(\"type\").notNull(), // account, page, instagram, whatsapp, leadform, website\n  name: text(\"name\").notNull(),\n  value: text(\"value\").notNull(), // the actual ID or URL\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertResourceSchema = createInsertSchema(resources).omit({\n  id: true,\n  tenantId: true,\n  createdAt: true,\n});\nexport type InsertResource = z.infer<typeof insertResourceSchema>;\nexport type Resource = typeof resources.$inferSelect;\n\n// Audiences table - target audience profiles\nexport const audiences = pgTable(\"audiences\", {\n  id: serial(\"id\").primaryKey(),\n  tenantId: integer(\"tenant_id\").notNull().references(() => tenants.id),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // interesse, custom_list\n  ageMin: integer(\"age_min\"),\n  ageMax: integer(\"age_max\"),\n  interests: text(\"interests\").array(),\n  behaviors: text(\"behaviors\").array(),\n  locations: text(\"locations\").array().notNull(),\n  customListFile: text(\"custom_list_file\"), // for CSV uploads\n  estimatedSize: text(\"estimated_size\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertAudienceSchema = createInsertSchema(audiences).omit({\n  id: true,\n  tenantId: true,\n  createdAt: true,\n});\nexport type InsertAudience = z.infer<typeof insertAudienceSchema>;\nexport type Audience = typeof audiences.$inferSelect;\n\n// Campaigns table\nexport const campaigns = pgTable(\"campaigns\", {\n  id: serial(\"id\").primaryKey(),\n  tenantId: integer(\"tenant_id\").notNull().references(() => tenants.id),\n  name: text(\"name\").notNull(),\n  objective: text(\"objective\").notNull(), // LEAD, TRAFFIC, WHATSAPP, CONVERSIONS, REACH\n  status: text(\"status\").notNull().default(\"draft\"), // draft, active, paused, completed\n  budget: text(\"budget\").notNull(),\n  accountId: integer(\"account_id\").references(() => resources.id),\n  pageId: integer(\"page_id\").references(() => resources.id),\n  instagramId: integer(\"instagram_id\").references(() => resources.id),\n  whatsappId: integer(\"whatsapp_id\").references(() => resources.id),\n  leadformId: integer(\"leadform_id\").references(() => resources.id),\n  websiteUrl: text(\"website_url\"),\n  audienceIds: integer(\"audience_ids\").array().notNull(),\n  title: text(\"title\"),\n  message: text(\"message\"),\n  driveFolderId: text(\"drive_folder_id\"),\n  startTime: timestamp(\"start_time\"),\n  endTime: timestamp(\"end_time\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  tenantId: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\n\n// Integrations table - API configurations\nexport const integrations = pgTable(\"integrations\", {\n  id: serial(\"id\").primaryKey(),\n  tenantId: integer(\"tenant_id\").notNull().references(() => tenants.id),\n  provider: text(\"provider\").notNull(), // meta_ads, google_drive\n  config: jsonb(\"config\").notNull(), // stores API keys, tokens, etc (encrypted)\n  status: text(\"status\").notNull().default(\"pending\"), // pending, connected, error\n  lastChecked: timestamp(\"last_checked\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertIntegrationSchema = createInsertSchema(integrations).omit({\n  id: true,\n  tenantId: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertIntegration = z.infer<typeof insertIntegrationSchema>;\nexport type Integration = typeof integrations.$inferSelect;\n\n// Automations table - n8n webhook tracking\nexport const automations = pgTable(\"automations\", {\n  id: serial(\"id\").primaryKey(),\n  tenantId: integer(\"tenant_id\").notNull().references(() => tenants.id),\n  campaignId: integer(\"campaign_id\").references(() => campaigns.id),\n  webhookUrl: text(\"webhook_url\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, sent, success, failed\n  payload: jsonb(\"payload\"),\n  response: jsonb(\"response\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const insertAutomationSchema = createInsertSchema(automations).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertAutomation = z.infer<typeof insertAutomationSchema>;\nexport type Automation = typeof automations.$inferSelect;\n\n// App Settings table - global OAuth and webhook configuration (admin only)\nexport const appSettings = pgTable(\"app_settings\", {\n  id: serial(\"id\").primaryKey(),\n  metaAppId: text(\"meta_app_id\"),\n  metaAppSecret: text(\"meta_app_secret\"),\n  googleClientId: text(\"google_client_id\"),\n  googleClientSecret: text(\"google_client_secret\"),\n  n8nWebhookUrl: text(\"n8n_webhook_url\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertAppSettingsSchema = createInsertSchema(appSettings).omit({\n  id: true,\n  updatedAt: true,\n});\nexport type InsertAppSettings = z.infer<typeof insertAppSettingsSchema>;\nexport type AppSettings = typeof appSettings.$inferSelect;\n","size_bytes":6659},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/AppSidebar.tsx":{"content":"import { Home, Settings, FileText, LayoutDashboard, Users, Plug, LogOut, Shield } from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\n\nconst items = [\n  { title: \"Dashboard\", url: \"/\", icon: LayoutDashboard },\n  { title: \"Campanhas\", url: \"/campaigns\", icon: FileText },\n  { title: \"Públicos\", url: \"/audiences\", icon: Users },\n  { title: \"Recursos\", url: \"/resources\", icon: Settings },\n  { title: \"Integrações\", url: \"/integrations\", icon: Plug },\n];\n\nconst adminItems = [\n  { title: \"Admin\", url: \"/admin\", icon: Shield },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { logout, user } = useAuth();\n\n  const isAdmin = user?.role === \"admin\";\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Meta Ads Manager</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <a href={item.url} data-testid={`link-${item.title.toLowerCase()}`}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n              {isAdmin && adminItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <a href={item.url} data-testid={`link-${item.title.toLowerCase()}`}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarFooter className=\"p-4 border-t\">\n        <div className=\"flex flex-col gap-2\">\n          <div className=\"text-sm text-muted-foreground truncate\">\n            {user?.email}\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={logout}\n            data-testid=\"button-logout\"\n            className=\"w-full\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Sair\n          </Button>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":2755},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/Integrations.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport StatusBadge from \"@/components/StatusBadge\";\nimport { Loader2, Link as LinkIcon, CheckCircle2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface Integration {\n  id: number;\n  tenantId: number;\n  provider: string;\n  config: any;\n  status: string;\n}\n\nexport default function Integrations() {\n  const [isTesting, setIsTesting] = useState(false);\n  const { toast } = useToast();\n\n  const { data: integrations = [] } = useQuery<Integration[]>({\n    queryKey: [\"/api/integrations\"],\n  });\n\n  const metaIntegration = integrations.find((i) => i.provider === \"Meta\");\n  const driveIntegration = integrations.find((i) => i.provider === \"Google Drive\");\n\n  const handleTestConnection = (provider: string) => {\n    setIsTesting(true);\n    setTimeout(() => {\n      setIsTesting(false);\n      toast({\n        title: \"Conexão testada\",\n        description: `A conexão com ${provider} foi testada com sucesso`,\n      });\n    }, 1500);\n  };\n\n  const handleMetaOAuth = () => {\n    window.location.href = \"/auth/meta\";\n  };\n\n  const handleGoogleOAuth = () => {\n    window.location.href = \"/auth/google\";\n  };\n\n  // Check for OAuth success\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    if (params.get('oauth') === 'success') {\n      toast({\n        title: \"Conectado com sucesso!\",\n        description: \"Sua integração foi configurada.\",\n      });\n      // Clean URL\n      window.history.replaceState({}, '', '/integrations');\n      // Refresh integrations\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations\"] });\n    }\n  }, [toast]);\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-semibold\">Integrações</h1>\n        <p className=\"text-muted-foreground\">Conecte sua conta com APIs externas usando OAuth</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  Meta Ads API\n                  <StatusBadge status={metaIntegration ? \"connected\" : \"pending\"} />\n                </CardTitle>\n                <CardDescription className=\"mt-2\">\n                  Conecte sua conta Meta para importar recursos automaticamente\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {metaIntegration && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                <span>Conectado com sucesso</span>\n              </div>\n            )}\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={handleMetaOAuth}\n                data-testid=\"button-connect-meta\"\n              >\n                <LinkIcon className=\"h-4 w-4 mr-2\" />\n                {metaIntegration ? \"Reconectar OAuth\" : \"Conectar OAuth\"}\n              </Button>\n              {metaIntegration && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleTestConnection(\"Meta\")}\n                  disabled={isTesting}\n                  data-testid=\"button-test-meta\"\n                >\n                  {isTesting ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                  )}\n                  Testar Conexão\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  Google Drive API\n                  <StatusBadge status={driveIntegration ? \"connected\" : \"pending\"} />\n                </CardTitle>\n                <CardDescription className=\"mt-2\">\n                  Conecte sua conta Google para acessar pastas do Drive\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {driveIntegration && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                <span>Conectado com sucesso</span>\n              </div>\n            )}\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={handleGoogleOAuth}\n                data-testid=\"button-connect-google\"\n              >\n                <LinkIcon className=\"h-4 w-4 mr-2\" />\n                {driveIntegration ? \"Reconectar OAuth\" : \"Conectar OAuth\"}\n              </Button>\n              {driveIntegration && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleTestConnection(\"Google Drive\")}\n                  disabled={isTesting}\n                  data-testid=\"button-test-drive\"\n                >\n                  {isTesting ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                  )}\n                  Testar Conexão\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card className=\"border-accent/20 bg-accent/5\">\n        <CardHeader>\n          <CardTitle className=\"text-base\">Como funciona o OAuth</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-2 text-sm text-muted-foreground\">\n          <p>\n            <strong className=\"text-foreground\">1.</strong> Clique em \"Conectar OAuth\" para ser redirecionado à página de login do serviço\n          </p>\n          <p>\n            <strong className=\"text-foreground\">2.</strong> Faça login e autorize o acesso às suas informações\n          </p>\n          <p>\n            <strong className=\"text-foreground\">3.</strong> Você será redirecionado de volta e seus recursos serão importados automaticamente\n          </p>\n          <p className=\"pt-2 text-xs\">\n            <strong>Nota:</strong> Certifique-se de que as URLs de callback estão configuradas corretamente no Meta App e Google Cloud Console.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7034},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/examples/StatusBadge.tsx":{"content":"import StatusBadge from \"../StatusBadge\";\n\nexport default function StatusBadgeExample() {\n  return (\n    <div className=\"flex gap-4\">\n      <StatusBadge status=\"connected\" />\n      <StatusBadge status=\"pending\" />\n      <StatusBadge status=\"error\" />\n    </div>\n  );\n}\n","size_bytes":269},"client/src/components/examples/KPICard.tsx":{"content":"import KPICard from \"../KPICard\";\nimport { DollarSign } from \"lucide-react\";\n\nexport default function KPICardExample() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n      <KPICard title=\"Total Spend\" value=\"R$ 12.450\" icon={DollarSign} trend={{ value: \"12.5%\", positive: true }} />\n    </div>\n  );\n}\n","size_bytes":342},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/pages/CampaignForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface Resource {\n  id: number;\n  tenantId: number;\n  type: string;\n  name: string;\n  value: string;\n}\n\ninterface Audience {\n  id: number;\n  tenantId: number;\n  name: string;\n  type: string;\n  ageMin: number | null;\n  ageMax: number | null;\n  interests: string[] | null;\n  behaviors: string[] | null;\n  locations: string[] | null;\n}\n\nexport default function CampaignForm() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [objective, setObjective] = useState(\"\");\n  const [selectedAudiences, setSelectedAudiences] = useState<number[]>([]);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    budget: \"\",\n    accountId: \"\",\n    pageId: \"\",\n    instagramId: \"\",\n    whatsappId: \"\",\n    leadformId: \"\",\n    websiteUrl: \"\",\n    title: \"\",\n    message: \"\",\n    driveFolderId: \"\",\n  });\n\n  // Fetch resources and audiences from API\n  const { data: resources = [] } = useQuery<Resource[]>({\n    queryKey: [\"/api/resources\"],\n  });\n\n  const { data: audiences = [] } = useQuery<Audience[]>({\n    queryKey: [\"/api/audiences\"],\n  });\n\n  // Group resources by type\n  const accounts = resources.filter((r) => r.type === \"account\");\n  const pages = resources.filter((r) => r.type === \"page\");\n  const instagrams = resources.filter((r) => r.type === \"instagram\");\n  const whatsapps = resources.filter((r) => r.type === \"whatsapp\");\n  const leadforms = resources.filter((r) => r.type === \"leadform\");\n\n  const toggleAudience = (audienceId: number) => {\n    setSelectedAudiences((prev) =>\n      prev.includes(audienceId)\n        ? prev.filter((id) => id !== audienceId)\n        : [...prev, audienceId]\n    );\n  };\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/campaigns\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({\n        title: \"Campanha criada!\",\n        description: \"A campanha foi criada com sucesso\",\n      });\n      setLocation(\"/campaigns\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao criar campanha\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (selectedAudiences.length === 0) {\n      toast({\n        title: \"Erro de validação\",\n        description: \"Selecione pelo menos um público\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMutation.mutate({\n      name: formData.name,\n      objective,\n      status: \"draft\",\n      budget: formData.budget,\n      accountId: formData.accountId ? Number(formData.accountId) : null,\n      pageId: formData.pageId ? Number(formData.pageId) : null,\n      instagramId: formData.instagramId ? Number(formData.instagramId) : null,\n      whatsappId: formData.whatsappId ? Number(formData.whatsappId) : null,\n      leadformId: formData.leadformId ? Number(formData.leadformId) : null,\n      websiteUrl: formData.websiteUrl || null,\n      audienceIds: selectedAudiences,\n      title: formData.title,\n      message: formData.message,\n      driveFolderId: formData.driveFolderId || null,\n    });\n  };\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-semibold\">Nova Campanha</h1>\n        <p className=\"text-muted-foreground\">Crie uma nova campanha Meta Ads com 3 Ad Sets</p>\n      </div>\n\n      <Tabs defaultValue=\"details\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"details\" data-testid=\"tab-details\">\n            Detalhes\n          </TabsTrigger>\n          <TabsTrigger value=\"audiences\" data-testid=\"tab-audiences\">\n            Públicos ({selectedAudiences.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"creatives\" data-testid=\"tab-creatives\">\n            Criativos\n          </TabsTrigger>\n          <TabsTrigger value=\"schedule\" data-testid=\"tab-schedule\">\n            Agendamento\n          </TabsTrigger>\n        </TabsList>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <TabsContent value=\"details\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Detalhes da Campanha</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"campaign-name\">Nome da Campanha *</Label>\n                  <Input\n                    id=\"campaign-name\"\n                    placeholder=\"Ex: Promoção de Verão 2025\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    data-testid=\"input-campaign-name\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"objective\">Objetivo *</Label>\n                    <Select value={objective} onValueChange={setObjective}>\n                      <SelectTrigger id=\"objective\" data-testid=\"select-objective\">\n                        <SelectValue placeholder=\"Selecione\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"LEAD\">Geração de Leads</SelectItem>\n                        <SelectItem value=\"TRAFFIC\">Tráfego</SelectItem>\n                        <SelectItem value=\"WHATSAPP\">WhatsApp</SelectItem>\n                        <SelectItem value=\"CONVERSIONS\">Conversões</SelectItem>\n                        <SelectItem value=\"REACH\">Alcance</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"budget\">Orçamento Diário *</Label>\n                    <Input \n                      id=\"budget\" \n                      type=\"number\" \n                      placeholder=\"0.00\"\n                      value={formData.budget}\n                      onChange={(e) => setFormData({ ...formData, budget: e.target.value })}\n                      data-testid=\"input-budget\" \n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Recursos</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"account\">Conta Meta Ads *</Label>\n                    <Select value={formData.accountId} onValueChange={(v) => setFormData({ ...formData, accountId: v })}>\n                      <SelectTrigger id=\"account\" data-testid=\"select-account\">\n                        <SelectValue placeholder=\"Selecione\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {accounts.map((account) => (\n                          <SelectItem key={account.id} value={String(account.id)}>\n                            {account.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"page\">Página Facebook *</Label>\n                    <Select value={formData.pageId} onValueChange={(v) => setFormData({ ...formData, pageId: v })}>\n                      <SelectTrigger id=\"page\" data-testid=\"select-page\">\n                        <SelectValue placeholder=\"Selecione\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {pages.map((page) => (\n                          <SelectItem key={page.id} value={String(page.id)}>\n                            {page.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {objective === \"LEAD\" && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"leadform\">Formulário de Leads *</Label>\n                    <Select value={formData.leadformId} onValueChange={(v) => setFormData({ ...formData, leadformId: v })}>\n                      <SelectTrigger id=\"leadform\" data-testid=\"select-leadform\">\n                        <SelectValue placeholder=\"Selecione\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {leadforms.map((leadform) => (\n                          <SelectItem key={leadform.id} value={String(leadform.id)}>\n                            {leadform.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                {objective === \"TRAFFIC\" && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"website\">Website URL *</Label>\n                    <Input \n                      id=\"website\" \n                      placeholder=\"https://exemplo.com\"\n                      value={formData.websiteUrl}\n                      onChange={(e) => setFormData({ ...formData, websiteUrl: e.target.value })}\n                      data-testid=\"input-website\" \n                    />\n                  </div>\n                )}\n\n                {objective === \"WHATSAPP\" && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"whatsapp\">WhatsApp Number ID *</Label>\n                    <Select value={formData.whatsappId} onValueChange={(v) => setFormData({ ...formData, whatsappId: v })}>\n                      <SelectTrigger id=\"whatsapp\" data-testid=\"select-whatsapp\">\n                        <SelectValue placeholder=\"Selecione\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {whatsapps.map((whatsapp) => (\n                          <SelectItem key={whatsapp.id} value={String(whatsapp.id)}>\n                            {whatsapp.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"audiences\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Selecione os Públicos-Alvo</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Escolha um ou mais públicos para segmentar seus anúncios. Cada público será usado para\n                  criar um Ad Set separado.\n                </p>\n                <div className=\"space-y-4\">\n                  {audiences.map((audience) => (\n                    <div\n                      key={audience.id}\n                      className={`border rounded-md p-4 hover-elevate ${\n                        selectedAudiences.includes(audience.id) ? \"border-primary\" : \"\"\n                      }`}\n                      data-testid={`audience-option-${audience.id}`}\n                    >\n                      <div className=\"flex items-start space-x-3\">\n                        <Checkbox\n                          id={`audience-${audience.id}`}\n                          checked={selectedAudiences.includes(audience.id)}\n                          onCheckedChange={() => toggleAudience(audience.id)}\n                          data-testid={`checkbox-audience-${audience.id}`}\n                        />\n                        <div className=\"flex-1\">\n                          <Label\n                            htmlFor={`audience-${audience.id}`}\n                            className=\"cursor-pointer font-medium\"\n                          >\n                            {audience.name}\n                          </Label>\n                          <div className=\"mt-2 flex flex-wrap gap-2\">\n                            <Badge variant=\"outline\">{audience.type}</Badge>\n                          </div>\n                          {audience.ageMin && audience.ageMax && (\n                            <p className=\"text-sm text-muted-foreground mt-2\">\n                              Idade: {audience.ageMin} - {audience.ageMax} anos\n                            </p>\n                          )}\n                          {audience.interests && (\n                            <div className=\"mt-2\">\n                              <p className=\"text-sm text-muted-foreground\">\n                                Interesses: {audience.interests.join(\", \")}\n                              </p>\n                            </div>\n                          )}\n                          {audience.locations && (\n                            <div className=\"mt-2\">\n                              <p className=\"text-sm text-muted-foreground\">\n                                Localizações: {audience.locations.join(\", \")}\n                              </p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                {selectedAudiences.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground mt-4 text-center\">\n                    Nenhum público selecionado. Selecione pelo menos um público para continuar.\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"creatives\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Criativos</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Título *</Label>\n                  <Input \n                    id=\"title\" \n                    placeholder=\"Título do anúncio\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    data-testid=\"input-title\" \n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"message\">Texto Principal *</Label>\n                  <Textarea\n                    id=\"message\"\n                    placeholder=\"Mensagem do anúncio\"\n                    rows={4}\n                    value={formData.message}\n                    onChange={(e) => setFormData({ ...formData, message: e.target.value })}\n                    data-testid=\"input-message\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"drive-folder\">Pasta Google Drive *</Label>\n                  <Input \n                    id=\"drive-folder\"\n                    placeholder=\"Insira o ID da pasta do Drive\"\n                    value={formData.driveFolderId}\n                    onChange={(e) => setFormData({ ...formData, driveFolderId: e.target.value })}\n                    data-testid=\"input-drive-folder\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">Você pode obter o ID da pasta após conectar OAuth com Google Drive</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"schedule\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Agendamento</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"start-time\">Data/Hora de Início *</Label>\n                    <Input id=\"start-time\" type=\"datetime-local\" data-testid=\"input-start-time\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"end-time\">Data/Hora de Fim</Label>\n                    <Input id=\"end-time\" type=\"datetime-local\" data-testid=\"input-end-time\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" type=\"button\" data-testid=\"button-cancel\">\n              Cancelar\n            </Button>\n            <Button type=\"submit\" data-testid=\"button-submit\">\n              Criar Campanha\n            </Button>\n          </div>\n        </form>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":17773},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/examples/Audiences.tsx":{"content":"import Audiences from \"../../pages/Audiences\";\n\nexport default function AudiencesExample() {\n  return <Audiences />;\n}\n","size_bytes":119},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (user: User) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already authenticated on mount\n    async function checkAuth() {\n      try {\n        const res = await fetch(\"/api/auth/me\", {\n          credentials: \"include\",\n        });\n\n        if (res.ok) {\n          const data = await res.json();\n          setUser(data.user);\n        }\n      } catch (error) {\n        // User is not authenticated\n        setUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    checkAuth();\n  }, []);\n\n  const login = (user: User) => {\n    setUser(user);\n  };\n\n  const logout = async () => {\n    try {\n      await fetch(\"/api/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      setUser(null);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        isAuthenticated: !!user,\n        login,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":1764},"client/src/pages/Admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Shield, Key, Webhook } from \"lucide-react\";\n\ninterface AppSettings {\n  id: number;\n  metaAppId: string | null;\n  metaAppSecret: string | null;\n  googleClientId: string | null;\n  googleClientSecret: string | null;\n  n8nWebhookUrl: string | null;\n  updatedAt: Date;\n}\n\nexport default function Admin() {\n  const { toast } = useToast();\n\n  const { data: settings, isLoading } = useQuery<AppSettings | null>({\n    queryKey: [\"/api/admin/settings\"],\n  });\n\n  const [formData, setFormData] = useState({\n    metaAppId: \"\",\n    metaAppSecret: \"\",\n    googleClientId: \"\",\n    googleClientSecret: \"\",\n    n8nWebhookUrl: \"\",\n  });\n\n  const saveMutation = useMutation({\n    mutationFn: (data: Partial<typeof formData>) =>\n      apiRequest(\"PUT\", \"/api/admin/settings\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n      toast({\n        title: \"Configurações salvas\",\n        description: \"As configurações foram atualizadas com sucesso.\",\n      });\n      setFormData({\n        metaAppId: \"\",\n        metaAppSecret: \"\",\n        googleClientId: \"\",\n        googleClientSecret: \"\",\n        n8nWebhookUrl: \"\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao salvar\",\n        description: error.message || \"Não foi possível salvar as configurações.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    const updates: any = {};\n    \n    if (formData.metaAppId) updates.metaAppId = formData.metaAppId;\n    if (formData.metaAppSecret) updates.metaAppSecret = formData.metaAppSecret;\n    if (formData.googleClientId) updates.googleClientId = formData.googleClientId;\n    if (formData.googleClientSecret) updates.googleClientSecret = formData.googleClientSecret;\n    if (formData.n8nWebhookUrl) updates.n8nWebhookUrl = formData.n8nWebhookUrl;\n\n    if (Object.keys(updates).length === 0) {\n      toast({\n        title: \"Nenhuma alteração\",\n        description: \"Preencha ao menos um campo para atualizar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveMutation.mutate(updates);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <p className=\"text-muted-foreground\">Carregando configurações...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Configurações de Admin</h1>\n        <p className=\"text-muted-foreground\">\n          Configure credenciais OAuth e webhook para o sistema (acesso restrito a administradores)\n        </p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-1 lg:grid-cols-2\">\n        {/* Meta OAuth */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5 text-blue-600\" />\n              <CardTitle>Meta OAuth App</CardTitle>\n            </div>\n            <CardDescription>\n              Configurações para autenticação OAuth com Meta (Facebook/Instagram)\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"meta-app-id\">App ID</Label>\n              <Input\n                id=\"meta-app-id\"\n                data-testid=\"input-meta-app-id\"\n                placeholder=\"Digite o Meta App ID\"\n                value={formData.metaAppId}\n                onChange={(e) => setFormData({ ...formData, metaAppId: e.target.value })}\n              />\n              {settings?.metaAppId && (\n                <p className=\"text-xs text-muted-foreground\">\n                  Atual: {settings.metaAppId}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"meta-app-secret\">App Secret</Label>\n              <Input\n                id=\"meta-app-secret\"\n                data-testid=\"input-meta-app-secret\"\n                type=\"password\"\n                placeholder=\"Digite o Meta App Secret\"\n                value={formData.metaAppSecret}\n                onChange={(e) => setFormData({ ...formData, metaAppSecret: e.target.value })}\n              />\n              {settings?.metaAppSecret && (\n                <p className=\"text-xs text-muted-foreground\">\n                  {settings.metaAppSecret}\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Google OAuth */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Key className=\"h-5 w-5 text-green-600\" />\n              <CardTitle>Google OAuth App</CardTitle>\n            </div>\n            <CardDescription>\n              Configurações para autenticação OAuth com Google Drive\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"google-client-id\">Client ID</Label>\n              <Input\n                id=\"google-client-id\"\n                data-testid=\"input-google-client-id\"\n                placeholder=\"Digite o Google Client ID\"\n                value={formData.googleClientId}\n                onChange={(e) => setFormData({ ...formData, googleClientId: e.target.value })}\n              />\n              {settings?.googleClientId && (\n                <p className=\"text-xs text-muted-foreground\">\n                  Atual: {settings.googleClientId}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"google-client-secret\">Client Secret</Label>\n              <Input\n                id=\"google-client-secret\"\n                data-testid=\"input-google-client-secret\"\n                type=\"password\"\n                placeholder=\"Digite o Google Client Secret\"\n                value={formData.googleClientSecret}\n                onChange={(e) => setFormData({ ...formData, googleClientSecret: e.target.value })}\n              />\n              {settings?.googleClientSecret && (\n                <p className=\"text-xs text-muted-foreground\">\n                  {settings.googleClientSecret}\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* n8n Webhook */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Webhook className=\"h-5 w-5 text-purple-600\" />\n              <CardTitle>n8n Webhook</CardTitle>\n            </div>\n            <CardDescription>\n              URL do webhook n8n para automação de campanhas\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"n8n-webhook-url\">Webhook URL</Label>\n              <Input\n                id=\"n8n-webhook-url\"\n                data-testid=\"input-n8n-webhook-url\"\n                placeholder=\"https://seu-n8n.com/webhook/...\"\n                value={formData.n8nWebhookUrl}\n                onChange={(e) => setFormData({ ...formData, n8nWebhookUrl: e.target.value })}\n              />\n              {settings?.n8nWebhookUrl && (\n                <p className=\"text-xs text-muted-foreground\">\n                  Atual: {settings.n8nWebhookUrl}\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex justify-end gap-3\">\n        <Button\n          variant=\"outline\"\n          onClick={() => {\n            setFormData({\n              metaAppId: \"\",\n              metaAppSecret: \"\",\n              googleClientId: \"\",\n              googleClientSecret: \"\",\n              n8nWebhookUrl: \"\",\n            });\n          }}\n          data-testid=\"button-cancel\"\n        >\n          Cancelar\n        </Button>\n        <Button\n          onClick={handleSave}\n          disabled={saveMutation.isPending}\n          data-testid=\"button-save\"\n        >\n          {saveMutation.isPending ? \"Salvando...\" : \"Salvar Configurações\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8623},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Register() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [tenantName, setTenantName] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const res = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ email, password, tenantName }),\n      });\n\n      if (!res.ok) {\n        const data = await res.json();\n        throw new Error(data.message || \"Falha no cadastro\");\n      }\n\n      const data = await res.json();\n      login(data.user);\n      toast({\n        title: \"Cadastro realizado com sucesso!\",\n        description: `Bem-vindo, ${data.user.email}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro no cadastro\",\n        description: error instanceof Error ? error.message : \"Não foi possível criar a conta\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Criar Nova Conta</CardTitle>\n          <CardDescription>Cadastre-se para começar a gerenciar suas campanhas</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"tenantName\">Nome da Empresa</Label>\n              <Input\n                id=\"tenantName\"\n                type=\"text\"\n                placeholder=\"Minha Empresa\"\n                value={tenantName}\n                onChange={(e) => setTenantName(e.target.value)}\n                data-testid=\"input-tenant-name\"\n                required\n                disabled={isLoading}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"seu@email.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                data-testid=\"input-email\"\n                required\n                disabled={isLoading}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                data-testid=\"input-password\"\n                required\n                disabled={isLoading}\n                minLength={6}\n              />\n              <p className=\"text-xs text-muted-foreground\">Mínimo de 6 caracteres</p>\n            </div>\n            <Button type=\"submit\" className=\"w-full\" data-testid=\"button-register\" disabled={isLoading}>\n              {isLoading ? \"Cadastrando...\" : \"Criar Conta\"}\n            </Button>\n            <div className=\"text-center text-sm\">\n              <span className=\"text-muted-foreground\">Já tem uma conta? </span>\n              <a href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n                Fazer login\n              </a>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4104},"replit.md":{"content":"# Meta Ads Campaign Management Platform\n\n## Overview\nA multi-tenant Meta Ads campaign management platform for creating, managing, and monitoring advertising campaigns across Meta's platforms (Facebook, Instagram, WhatsApp). It provides a guided onboarding experience, a comprehensive dashboard for analytics, and automated workflows. The platform is designed as an enterprise productivity application focusing on data-dense interfaces, efficient workflows, and progressive disclosure of complexity.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend\n- **Framework**: React with TypeScript using Vite.\n- **UI**: Shadcn UI (Radix UI) with Tailwind CSS, custom design system adhering to Microsoft Fluent Design.\n- **State Management**: TanStack Query for server state, local React state for UI. No global state management library.\n- **Routing**: Wouter for client-side routing with a file-based structure.\n- **Design Philosophy**: Clarity, functional-first approach, efficient workflows, progressive disclosure, consistent patterns.\n- **Typography**: Inter (primary) and JetBrains Mono (monospace).\n- **Key UI Patterns**: Sidebar navigation, modal dialogs, card-based layouts, status badges, KPI cards.\n\n### Backend\n- **Runtime**: Node.js with Express.js.\n- **Language**: TypeScript with ES modules.\n- **API Design**: RESTful architecture with session-based authentication (Passport.js) and structured logging.\n- **Authentication & Authorization**: JWT-based sessions, bcrypt for password hashing, multi-tenant RBAC (admin, manager, user).\n- **Data Layer**: Repository pattern with `IStorage` interface abstraction.\n- **Build & Development**: `tsx` for dev, `esbuild` for production, Vite dev server with HMR.\n\n### Data Storage Solutions\n- **Database**: PostgreSQL (via Neon serverless).\n- **ORM**: Drizzle ORM with Neon serverless driver for type-safe queries and schema-first migrations.\n- **Schema Design** (Multi-tenant with Row-Level Security):\n    - **Tenants**: Core multi-tenancy isolation.\n    - **Users**: Authentication, user management, RBAC.\n    - **Resources**: Meta Ads platform resources (accounts, pages, etc.), tenant-scoped.\n    - **Audiences**: Custom audience definitions, tenant-scoped.\n    - **Campaigns**: Campaign metadata and configuration, tenant-scoped.\n    - **Integrations**: Encrypted external service credentials (Meta, WhatsApp, Google Drive), tenant-scoped.\n    - **Automations**: n8n workflow definitions.\n- **Data Isolation**: Row-Level Security (RLS) enforced via `tenant_id` at the database level.\n\n### Security Considerations\n- Credentials encrypted at rest.\n- No secrets in logs or client responses.\n- Session-based authentication with secure cookie handling.\n- CORS and credential inclusion.\n- Raw body preservation for webhook signature verification.\n- Multi-tenant isolation at API route level; `tenantId` cannot be overridden by clients.\n- All update/delete operations verify tenant ownership.\n\n## External Dependencies\n- **Meta Business Platform**: Meta Marketing API (Graph API v17.0+) for ad account, page, and Instagram Business Account management, using OAuth 2.0 or System User tokens.\n- **WhatsApp Cloud API**: Integration for messaging, template management, and webhooks.\n- **Google Drive API**: OAuth 2.0 for creative asset storage and management, including folder organization.\n- **n8n Workflow Automation**: Webhook-based event triggering and callback mechanisms for workflow completion.\n\n## Recent Updates (October 28, 2025)\n\n### OAuth & Resource Management\n- **OAuth Meta Flow**: Complete integration with automatic resource fetching (accounts, pages, Instagram, WhatsApp, lead forms)\n- **OAuth Google Drive**: Token management for Drive folder access\n- **Admin Configuration**: Secure credential storage for Meta App ID/Secret, Google Client ID/Secret\n- **Resource Auto-Import**: Resources automatically populated after OAuth login\n- **Security**: appsecret_proof for Meta API calls, CSRF protection, multi-tenant isolation\n\n### n8n Webhook Integration\n- **Auto-send on Campaign Creation**: Webhook automatically triggered when creating new campaigns (via POST `/api/campaigns`)\n- **Manual Resend**: \"Send to n8n\" button in campaigns list for reprocessing (via POST `/api/campaigns/:id/send-webhook`)\n- **Direct Send (Existing Campaign Form)**: POST `/api/webhooks/n8n` endpoint for sending data directly without creating a campaign\n- **Payload Format**: Matches n8n expected schema with all resource IDs (campaign_id, page_id, instagram_user_id, whatsapp_number_id, drive_folder_id, leadgen_form_id, etc.)\n- **Error Handling**: \n  - Webhook failures logged but don't block campaign creation\n  - Returns user-friendly error if n8n webhook is not configured\n  - Returns specific message if n8n webhook is in test mode and not active: \"Webhook n8n não está ativo. No n8n, clique em 'Execute workflow' e tente novamente.\"\n- **Configuration**: Webhook URL set via Admin > Configurações\n- **Test Mode**: n8n test webhooks require manual activation - click \"Execute workflow\" button in n8n before testing\n\n### Campaign Form Enhancements\n- **Resource Selectors**: Dynamic dropdowns populated from OAuth-imported resources\n- **Complete Payload**: All fields (title, message, driveFolderId) included in submissions\n- **Form State Management**: Controlled inputs with proper state binding\n\n## How to Test OAuth Flow\n\n### Step 1: Get Your Development URL\nBefore configuring OAuth, you need your Replit development URL:\n\n```bash\necho https://$REPLIT_DEV_DOMAIN\n```\n\nThis will output something like: `https://abc123-xyz789.id.replit.dev`\n\n**Use this URL for OAuth callback configuration during development.**\n\n### Step 2: Configure OAuth Providers\n\n#### Meta App Configuration (developers.facebook.com)\n1. Go to [Meta for Developers](https://developers.facebook.com)\n2. Create or select your app\n3. Go to **Settings > Basic**\n4. Add **Valid OAuth Redirect URIs**:\n   - Development: `https://YOUR-DEV-URL.replit.dev/auth/meta/callback`\n   - Production (after publish): `https://YOUR-APP.replit.app/auth/meta/callback`\n5. Add required permissions: `ads_management`, `pages_show_list`, `instagram_basic`, `whatsapp_business_management`, `leads_retrieval`\n6. Copy your **App ID** and **App Secret**\n\n#### Google Cloud Console Configuration (console.cloud.google.com)\n1. Go to [Google Cloud Console](https://console.cloud.google.com)\n2. Select or create a project\n3. Enable **Google Drive API**\n4. Go to **APIs & Services > Credentials**\n5. Create or edit OAuth 2.0 Client ID\n6. Add **Authorized redirect URIs**:\n   - Development: `https://YOUR-DEV-URL.replit.dev/auth/google/callback`\n   - Production (after publish): `https://YOUR-APP.replit.app/auth/google/callback`\n7. Add scope: `https://www.googleapis.com/auth/drive.readonly`\n8. Copy your **Client ID** and **Client Secret**\n\n### Step 3: Configure Credentials in App\n1. Login as admin (`admin@test.com` / `password`)\n2. Navigate to **Admin > Configurações**\n3. Enter Meta App ID and Secret\n4. Enter Google Client ID and Secret\n5. Enter n8n Webhook URL (if using n8n)\n6. Click **Save**\n\n### Step 4: Test Meta OAuth\n1. Navigate to **Integrações** page\n2. Click **\"Conectar OAuth\"** button in Meta Ads API card\n3. You'll be redirected to Facebook login\n4. Login and authorize the requested permissions\n5. You'll be redirected back to the app\n6. Success message appears: \"Conectado com sucesso!\"\n7. Navigate to **Recursos** page\n8. Verify resources appear in tabs:\n   - Contas de Anúncios\n   - Páginas\n   - Instagram\n   - WhatsApp\n   - Formulários de Leads\n\n### Step 5: Test Google Drive OAuth\n1. Navigate to **Integrações** page\n2. Click **\"Conectar OAuth\"** button in Google Drive API card\n3. You'll be redirected to Google login\n4. Login and authorize Drive access\n5. You'll be redirected back to the app\n6. Success message appears: \"Conectado com sucesso!\"\n7. Navigate to **Recursos** page\n8. Check **Drive Folders** tab for imported folders\n\n### Step 6: Test Campaign Creation with OAuth Resources\n1. Navigate to **Campanhas** > **\"Nova Campanha\"**\n2. Fill in campaign details\n3. **Verify dropdowns are populated**:\n   - Página Facebook (from Meta OAuth)\n   - Instagram User ID (from Meta OAuth)\n   - WhatsApp Number ID (from Meta OAuth)\n   - Formulário de Leads (from Meta OAuth)\n   - Pasta Google Drive (from Google OAuth)\n4. Select resources and fill other fields\n5. Click **\"Criar Campanha\"**\n6. Verify:\n   - Campaign created successfully\n   - Webhook sent to n8n automatically\n   - Redirected to campaigns list\n\n### Step 7: Test \"Adicionar a Campanha Existente\"\n1. Navigate to **Campanhas**\n2. Click **\"Adicionar a Campanha Existente\"**\n3. **Verify all dropdowns populate with OAuth resources**\n4. Select objectives, resources, fill fields\n5. Click **\"Enviar para n8n\"**\n6. Verify webhook sent successfully\n\n### Step 8: Test Manual Webhook Resend\n1. Go to **Campanhas** page\n2. Find an existing campaign\n3. Click the **Send icon** (paper plane) button\n4. Verify toast notification confirms success\n5. Check n8n for webhook receipt\n\n## OAuth Troubleshooting\n\n### Issue: \"Recusou estabelecer ligação\" or 403 Error\n**Cause**: Session not preserved during OAuth redirect\n**Solution**: Already fixed - session saves `userId` and `tenantId` before redirect\n\n### Issue: Dropdowns are empty after OAuth\n**Cause**: Resources not imported or wrong resource type filters\n**Solution**: \n- Check that resources were imported (go to Recursos page)\n- Verify resource type filters use lowercase: `page`, `instagram`, `whatsapp`, `leadform`, `drive_folder`\n\n### Issue: OAuth callback URL mismatch\n**Cause**: Callback URL in Meta/Google doesn't match actual URL\n**Solution**: \n- Verify your dev URL with `echo https://$REPLIT_DEV_DOMAIN`\n- Update callback URLs in Meta App and Google Cloud Console\n- Use exact URL format: `https://YOUR-URL/auth/meta/callback`\n\n### Issue: Missing permissions\n**Cause**: Meta App doesn't have required permissions\n**Solution**: Add all required permissions in Meta App settings:\n- `ads_management`\n- `pages_show_list`\n- `instagram_basic`\n- `whatsapp_business_management`\n- `leads_retrieval`\n\n## Important Notes\n- **Development vs Production**: You need different callback URLs for dev and production\n- **Multiple Callback URLs**: You can configure multiple callback URLs in both Meta and Google\n- **Token Refresh**: OAuth tokens are stored encrypted and managed automatically\n- **Multi-tenant Isolation**: Each tenant has its own OAuth credentials and resources\n- **Session Management**: OAuth flow uses session state to prevent CSRF and preserve authentication","size_bytes":10658}},"version":2}