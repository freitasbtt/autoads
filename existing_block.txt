
const ACTION_TYPE_LABELS: Record<string, string> = {
  lead: "Leads",
  leadgen: "Leads",
  "leadgen.other": "Leads",
  "leadgen_qualified_lead": "Leads qualificados",
  "leadgen.qualified_lead": "Leads qualificados",
  omni_lead: "Leads Omni",
  "onsite_conversion.lead_grouped": "Leads",
  "onsite_conversion.lead": "Leads",
  "onsite_conversion.post_save": "Salvos",
  "offsite_conversion.fb_pixel_lead": "Leads (pixel)",
  submit_application: "Envios de cadastro",
  submitted_application: "Cadastros enviados",
  contact: "Contatos",
  "onsite_conversion.whatsapp_message": "Conversas no WhatsApp",
  "onsite_conversion.whatsapp_first_reply": "Respostas no WhatsApp",
  "onsite_conversion.whatsapp_inbox_reply": "Respostas no WhatsApp",
  whatsapp_link_click: "Cliques para WhatsApp",
  whatsapp_conversion: "Conversões no WhatsApp",
  "onsite_conversion.messaging_first_reply": "Conversas por mensagem",
  messaging_conversation_started_7d: "Conversas iniciadas",
  messaging_connection: "Conexões por mensagem",
  messages_sent: "Mensagens enviadas",
  messaging_new_conversation: "Conversas iniciadas",
  omni_opt_in: "Opt-ins",
  omni_primary_message: "Mensagens principais",
  purchase: "Compras",
  "offsite_conversion.fb_pixel_purchase": "Compras (pixel)",
  initiate_checkout: "Inícios de checkout",
  checkout_initiated: "Inícios de checkout",
  add_to_cart: "Adições ao carrinho",
  add_payment_info: "Informações de pagamento",
  add_to_wishlist: "Adições à lista de desejos",
  conversion: "Conversões",
  website_conversion: "Conversões no site",
  complete_registration: "Cadastros concluídos",
  registration: "Cadastros",
  start_trial: "Inícios de teste",
  subscribe: "Assinaturas",
  schedule: "Agendamentos",
  link_click: "Cliques no link",
  outbound_click: "Cliques de saída",
  landing_page_view: "Visualizações da página de destino",
  view_content: "Visualizações de conteúdo",
};

type ResultActionMatcher = (actionType: string) => boolean;

function createExactMatcher(types: readonly string[]): ResultActionMatcher {
  const normalized = new Set(types.map((t) => t.toLowerCase()));
  return (actionType: string) => normalized.has(actionType.toLowerCase());
}

function createSubstringMatcher(
  fragments: readonly string[],
): ResultActionMatcher {
  const lowered = fragments.map((fragment) => fragment.toLowerCase());
  return (actionType: string) =>
    lowered.some((fragment) => actionType.toLowerCase().includes(fragment));
}

const RESULT_ACTION_PRIORITIES: ResultActionMatcher[] = [
  (type) => LEAD_ACTION_TYPES.has(type.toLowerCase()),
  createExactMatcher([
    "onsite_conversion.whatsapp_message",
    "onsite_conversion.whatsapp_first_reply",
    "onsite_conversion.whatsapp_inbox_reply",
    "whatsapp_link_click",
    "whatsapp_conversion",
  ]),
  createSubstringMatcher(["whatsapp"]),
  createExactMatcher([
    "onsite_conversion.messaging_first_reply",
    "messaging_conversation_started_7d",
    "messaging_connection",
    "messages_sent",
    "messaging_new_conversation",
    "omni_opt_in",
    "omni_primary_message",
  ]),
  createSubstringMatcher(["message", "messaging", "conversation"]),
  createSubstringMatcher(["purchase", "order"]),
  createSubstringMatcher([
    "initiate_checkout",
    "checkout",
    "add_to_cart",
    "add_payment_info",
  ]),
  createSubstringMatcher([
    "conversion",
    "complete_registration",
    "registration",
    "submit_application",
    "subscribe",
    "start_trial",
    "schedule",
    "contact",
  ]),
  createSubstringMatcher(["view_content", "landing_page_view"]),
  createSubstringMatcher(["link_click", "click"]),
];

type ResultSelection = {
  total: number;
  primaryType: string | null;
  contributors: Array<{ type: string; value: number }>;
};
